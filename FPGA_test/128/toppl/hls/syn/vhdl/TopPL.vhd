-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sweep_rx0_0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sweep_rx0_1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    norm_tx0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    norm_tx0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    norm_tx0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    norm_tx0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sweep_tx0_0_TVALID : OUT STD_LOGIC;
    sweep_tx0_0_TREADY : IN STD_LOGIC;
    sweep_tx0_1_TVALID : OUT STD_LOGIC;
    sweep_tx0_1_TREADY : IN STD_LOGIC;
    norm_tx0_TVALID : OUT STD_LOGIC;
    norm_tx0_TREADY : IN STD_LOGIC;
    sweep_rx0_0_TVALID : IN STD_LOGIC;
    sweep_rx0_0_TREADY : OUT STD_LOGIC;
    sweep_rx0_1_TVALID : IN STD_LOGIC;
    sweep_rx0_1_TREADY : OUT STD_LOGIC;
    norm_rx0_TVALID : IN STD_LOGIC;
    norm_rx0_TREADY : OUT STD_LOGIC );
end;


architecture behav of TopPL is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TopPL_TopPL,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=2.222000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=198,HLS_SYN_DSP=0,HLS_SYN_FF=25022,HLS_SYN_LUT=21782,HLS_VERSION=2023_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal dataIn : STD_LOGIC_VECTOR (63 downto 0);
    signal U : STD_LOGIC_VECTOR (63 downto 0);
    signal S : STD_LOGIC_VECTOR (63 downto 0);
    signal ConvArray : STD_LOGIC_VECTOR (63 downto 0);
    signal ITER : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem2_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_ap_start : STD_LOGIC;
    signal SystemControl_U0_start_full_n : STD_LOGIC;
    signal SystemControl_U0_ap_done : STD_LOGIC;
    signal SystemControl_U0_ap_continue : STD_LOGIC;
    signal SystemControl_U0_ap_idle : STD_LOGIC;
    signal SystemControl_U0_ap_ready : STD_LOGIC;
    signal SystemControl_U0_start_out : STD_LOGIC;
    signal SystemControl_U0_start_write : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal SystemControl_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal SystemControl_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal SystemControl_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal SystemControl_U0_syscontrol_0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_syscontrol_0_write : STD_LOGIC;
    signal SystemControl_U0_syscontrol_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_syscontrol_1_write : STD_LOGIC;
    signal SystemControl_U0_syscontrol_2_din : STD_LOGIC_VECTOR (0 downto 0);
    signal SystemControl_U0_syscontrol_2_write : STD_LOGIC;
    signal SystemControl_U0_convSet_0_read : STD_LOGIC;
    signal SystemControl_U0_convSet_1_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Send_U0_ap_start : STD_LOGIC;
    signal Send_U0_ap_done : STD_LOGIC;
    signal Send_U0_ap_continue : STD_LOGIC;
    signal Send_U0_ap_idle : STD_LOGIC;
    signal Send_U0_ap_ready : STD_LOGIC;
    signal Send_U0_syscontrol_0_read : STD_LOGIC;
    signal Send_U0_send_fifo_0_read : STD_LOGIC;
    signal Send_U0_send_fifo_1_read : STD_LOGIC;
    signal Send_U0_sweep_tx0_0_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal Send_U0_sweep_tx0_0_TVALID : STD_LOGIC;
    signal Send_U0_sweep_tx0_0_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_sweep_tx0_0_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_sweep_tx0_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Send_U0_sweep_tx0_1_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal Send_U0_sweep_tx0_1_TVALID : STD_LOGIC;
    signal Send_U0_sweep_tx0_1_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_sweep_tx0_1_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_sweep_tx0_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Send_U0_norm_tx0_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal Send_U0_norm_tx0_TVALID : STD_LOGIC;
    signal Send_U0_norm_tx0_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_norm_tx0_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal Send_U0_norm_tx0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_ap_start : STD_LOGIC;
    signal RoundRobin_U0_ap_done : STD_LOGIC;
    signal RoundRobin_U0_ap_continue : STD_LOGIC;
    signal RoundRobin_U0_ap_idle : STD_LOGIC;
    signal RoundRobin_U0_ap_ready : STD_LOGIC;
    signal RoundRobin_U0_syscontrol_1_read : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RoundRobin_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal RoundRobin_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal RoundRobin_U0_send_fifo_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal RoundRobin_U0_send_fifo_0_write : STD_LOGIC;
    signal RoundRobin_U0_send_fifo_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal RoundRobin_U0_send_fifo_1_write : STD_LOGIC;
    signal RoundRobin_U0_receive_fifo_0_read : STD_LOGIC;
    signal RoundRobin_U0_receive_fifo_1_read : STD_LOGIC;
    signal Receive_U0_ap_start : STD_LOGIC;
    signal Receive_U0_ap_done : STD_LOGIC;
    signal Receive_U0_ap_continue : STD_LOGIC;
    signal Receive_U0_ap_idle : STD_LOGIC;
    signal Receive_U0_ap_ready : STD_LOGIC;
    signal Receive_U0_syscontrol_2_read : STD_LOGIC;
    signal Receive_U0_convSet_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Receive_U0_convSet_0_write : STD_LOGIC;
    signal Receive_U0_convSet_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Receive_U0_convSet_1_write : STD_LOGIC;
    signal Receive_U0_receive_fifo_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal Receive_U0_receive_fifo_0_write : STD_LOGIC;
    signal Receive_U0_receive_fifo_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal Receive_U0_receive_fifo_1_write : STD_LOGIC;
    signal Receive_U0_sweep_rx0_0_TREADY : STD_LOGIC;
    signal Receive_U0_sweep_rx0_1_TREADY : STD_LOGIC;
    signal Receive_U0_norm_rx0_TREADY : STD_LOGIC;
    signal syscontrol_full_n : STD_LOGIC;
    signal syscontrol_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal syscontrol_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_empty_n : STD_LOGIC;
    signal syscontrol_1_full_n : STD_LOGIC;
    signal syscontrol_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal syscontrol_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_1_empty_n : STD_LOGIC;
    signal syscontrol_2_full_n : STD_LOGIC;
    signal syscontrol_2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal syscontrol_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal syscontrol_2_empty_n : STD_LOGIC;
    signal convSet_full_n : STD_LOGIC;
    signal convSet_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal convSet_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal convSet_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal convSet_empty_n : STD_LOGIC;
    signal convSet_1_full_n : STD_LOGIC;
    signal convSet_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal convSet_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal convSet_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal convSet_1_empty_n : STD_LOGIC;
    signal send_fifo_full_n : STD_LOGIC;
    signal send_fifo_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal send_fifo_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal send_fifo_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal send_fifo_empty_n : STD_LOGIC;
    signal send_fifo_1_full_n : STD_LOGIC;
    signal send_fifo_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal send_fifo_1_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal send_fifo_1_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal send_fifo_1_empty_n : STD_LOGIC;
    signal receive_fifo_full_n : STD_LOGIC;
    signal receive_fifo_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal receive_fifo_num_data_valid : STD_LOGIC_VECTOR (12 downto 0);
    signal receive_fifo_fifo_cap : STD_LOGIC_VECTOR (12 downto 0);
    signal receive_fifo_empty_n : STD_LOGIC;
    signal receive_fifo_1_full_n : STD_LOGIC;
    signal receive_fifo_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal receive_fifo_1_num_data_valid : STD_LOGIC_VECTOR (12 downto 0);
    signal receive_fifo_1_fifo_cap : STD_LOGIC_VECTOR (12 downto 0);
    signal receive_fifo_1_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_SystemControl_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_SystemControl_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_RoundRobin_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_RoundRobin_U0_ap_ready : STD_LOGIC;
    signal start_for_Send_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Send_U0_full_n : STD_LOGIC;
    signal start_for_Send_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Send_U0_empty_n : STD_LOGIC;
    signal start_for_Receive_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Receive_U0_full_n : STD_LOGIC;
    signal start_for_Receive_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Receive_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_SystemControl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ConvArray : IN STD_LOGIC_VECTOR (63 downto 0);
        syscontrol_0_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_0_full_n : IN STD_LOGIC;
        syscontrol_0_write : OUT STD_LOGIC;
        syscontrol_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_1_full_n : IN STD_LOGIC;
        syscontrol_1_write : OUT STD_LOGIC;
        syscontrol_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_2_full_n : IN STD_LOGIC;
        syscontrol_2_write : OUT STD_LOGIC;
        convSet_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        convSet_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_0_empty_n : IN STD_LOGIC;
        convSet_0_read : OUT STD_LOGIC;
        convSet_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        convSet_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_1_empty_n : IN STD_LOGIC;
        convSet_1_read : OUT STD_LOGIC );
    end component;


    component TopPL_Send IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        syscontrol_0_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_0_empty_n : IN STD_LOGIC;
        syscontrol_0_read : OUT STD_LOGIC;
        send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_empty_n : IN STD_LOGIC;
        send_fifo_0_read : OUT STD_LOGIC;
        send_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_empty_n : IN STD_LOGIC;
        send_fifo_1_read : OUT STD_LOGIC;
        sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_0_TVALID : OUT STD_LOGIC;
        sweep_tx0_0_TREADY : IN STD_LOGIC;
        sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_1_TVALID : OUT STD_LOGIC;
        sweep_tx0_1_TREADY : IN STD_LOGIC;
        sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        norm_tx0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        norm_tx0_TVALID : OUT STD_LOGIC;
        norm_tx0_TREADY : IN STD_LOGIC;
        norm_tx0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        norm_tx0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        norm_tx0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TopPL_RoundRobin IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        syscontrol_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_1_empty_n : IN STD_LOGIC;
        syscontrol_1_read : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        dataIn : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        U : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        S : IN STD_LOGIC_VECTOR (63 downto 0);
        send_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_full_n : IN STD_LOGIC;
        send_fifo_0_write : OUT STD_LOGIC;
        send_fifo_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_full_n : IN STD_LOGIC;
        send_fifo_1_write : OUT STD_LOGIC;
        receive_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_empty_n : IN STD_LOGIC;
        receive_fifo_0_read : OUT STD_LOGIC;
        receive_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_1_empty_n : IN STD_LOGIC;
        receive_fifo_1_read : OUT STD_LOGIC );
    end component;


    component TopPL_Receive IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        syscontrol_2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        syscontrol_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        syscontrol_2_empty_n : IN STD_LOGIC;
        syscontrol_2_read : OUT STD_LOGIC;
        convSet_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        convSet_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_0_full_n : IN STD_LOGIC;
        convSet_0_write : OUT STD_LOGIC;
        convSet_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        convSet_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        convSet_1_full_n : IN STD_LOGIC;
        convSet_1_write : OUT STD_LOGIC;
        receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_full_n : IN STD_LOGIC;
        receive_fifo_0_write : OUT STD_LOGIC;
        receive_fifo_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_1_full_n : IN STD_LOGIC;
        receive_fifo_1_write : OUT STD_LOGIC;
        sweep_rx0_0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        sweep_rx0_0_TVALID : IN STD_LOGIC;
        sweep_rx0_0_TREADY : OUT STD_LOGIC;
        sweep_rx0_0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sweep_rx0_1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        sweep_rx0_1_TVALID : IN STD_LOGIC;
        sweep_rx0_1_TREADY : OUT STD_LOGIC;
        sweep_rx0_1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        norm_rx0_TVALID : IN STD_LOGIC;
        norm_rx0_TREADY : OUT STD_LOGIC;
        norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TopPL_fifo_w1_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_fifo_w128_d512_B IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_fifo_w128_d4096_U IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_start_for_Send_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_start_for_Receive_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TopPL_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        dataIn : OUT STD_LOGIC_VECTOR (63 downto 0);
        U : OUT STD_LOGIC_VECTOR (63 downto 0);
        S : OUT STD_LOGIC_VECTOR (63 downto 0);
        ConvArray : OUT STD_LOGIC_VECTOR (63 downto 0);
        ITER : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component TopPL_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component TopPL_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component TopPL_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component TopPL_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component TopPL_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        dataIn => dataIn,
        U => U,
        S => S,
        ConvArray => ConvArray,
        ITER => ITER,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component TopPL_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => RoundRobin_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => RoundRobin_U0_m_axi_gmem0_ARADDR,
        I_ARLEN => RoundRobin_U0_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => RoundRobin_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component TopPL_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 67,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RFIFONUM => gmem1_RFIFONUM,
        I_AWVALID => RoundRobin_U0_m_axi_gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => RoundRobin_U0_m_axi_gmem1_AWADDR,
        I_AWLEN => RoundRobin_U0_m_axi_gmem1_AWLEN,
        I_WVALID => RoundRobin_U0_m_axi_gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => RoundRobin_U0_m_axi_gmem1_WDATA,
        I_WSTRB => RoundRobin_U0_m_axi_gmem1_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => RoundRobin_U0_m_axi_gmem1_BREADY);

    gmem2_m_axi_U : component TopPL_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 67,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RFIFONUM => gmem2_RFIFONUM,
        I_AWVALID => RoundRobin_U0_m_axi_gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => RoundRobin_U0_m_axi_gmem2_AWADDR,
        I_AWLEN => RoundRobin_U0_m_axi_gmem2_AWLEN,
        I_WVALID => RoundRobin_U0_m_axi_gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => RoundRobin_U0_m_axi_gmem2_WDATA,
        I_WSTRB => RoundRobin_U0_m_axi_gmem2_WSTRB,
        I_BVALID => gmem2_BVALID,
        I_BREADY => RoundRobin_U0_m_axi_gmem2_BREADY);

    gmem3_m_axi_U : component TopPL_gmem3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 67,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem3_RDATA,
        I_RFIFONUM => gmem3_RFIFONUM,
        I_AWVALID => SystemControl_U0_m_axi_gmem3_AWVALID,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => SystemControl_U0_m_axi_gmem3_AWADDR,
        I_AWLEN => SystemControl_U0_m_axi_gmem3_AWLEN,
        I_WVALID => SystemControl_U0_m_axi_gmem3_WVALID,
        I_WREADY => gmem3_WREADY,
        I_WDATA => SystemControl_U0_m_axi_gmem3_WDATA,
        I_WSTRB => SystemControl_U0_m_axi_gmem3_WSTRB,
        I_BVALID => gmem3_BVALID,
        I_BREADY => SystemControl_U0_m_axi_gmem3_BREADY);

    SystemControl_U0 : component TopPL_SystemControl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SystemControl_U0_ap_start,
        start_full_n => SystemControl_U0_start_full_n,
        ap_done => SystemControl_U0_ap_done,
        ap_continue => SystemControl_U0_ap_continue,
        ap_idle => SystemControl_U0_ap_idle,
        ap_ready => SystemControl_U0_ap_ready,
        start_out => SystemControl_U0_start_out,
        start_write => SystemControl_U0_start_write,
        ITER => ITER,
        m_axi_gmem3_AWVALID => SystemControl_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => gmem3_AWREADY,
        m_axi_gmem3_AWADDR => SystemControl_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => SystemControl_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => SystemControl_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => SystemControl_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => SystemControl_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => SystemControl_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => SystemControl_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => SystemControl_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => SystemControl_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => SystemControl_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => SystemControl_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => SystemControl_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => gmem3_WREADY,
        m_axi_gmem3_WDATA => SystemControl_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => SystemControl_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => SystemControl_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => SystemControl_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => SystemControl_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => SystemControl_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => ap_const_logic_0,
        m_axi_gmem3_ARADDR => SystemControl_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => SystemControl_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => SystemControl_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => SystemControl_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => SystemControl_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => SystemControl_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => SystemControl_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => SystemControl_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => SystemControl_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => SystemControl_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => SystemControl_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => ap_const_logic_0,
        m_axi_gmem3_RREADY => SystemControl_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => ap_const_lv32_0,
        m_axi_gmem3_RLAST => ap_const_logic_0,
        m_axi_gmem3_RID => ap_const_lv1_0,
        m_axi_gmem3_RFIFONUM => ap_const_lv11_0,
        m_axi_gmem3_RUSER => ap_const_lv1_0,
        m_axi_gmem3_RRESP => ap_const_lv2_0,
        m_axi_gmem3_BVALID => gmem3_BVALID,
        m_axi_gmem3_BREADY => SystemControl_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => gmem3_BRESP,
        m_axi_gmem3_BID => gmem3_BID,
        m_axi_gmem3_BUSER => gmem3_BUSER,
        ConvArray => ConvArray,
        syscontrol_0_din => SystemControl_U0_syscontrol_0_din,
        syscontrol_0_num_data_valid => syscontrol_num_data_valid,
        syscontrol_0_fifo_cap => syscontrol_fifo_cap,
        syscontrol_0_full_n => syscontrol_full_n,
        syscontrol_0_write => SystemControl_U0_syscontrol_0_write,
        syscontrol_1_din => SystemControl_U0_syscontrol_1_din,
        syscontrol_1_num_data_valid => syscontrol_1_num_data_valid,
        syscontrol_1_fifo_cap => syscontrol_1_fifo_cap,
        syscontrol_1_full_n => syscontrol_1_full_n,
        syscontrol_1_write => SystemControl_U0_syscontrol_1_write,
        syscontrol_2_din => SystemControl_U0_syscontrol_2_din,
        syscontrol_2_num_data_valid => syscontrol_2_num_data_valid,
        syscontrol_2_fifo_cap => syscontrol_2_fifo_cap,
        syscontrol_2_full_n => syscontrol_2_full_n,
        syscontrol_2_write => SystemControl_U0_syscontrol_2_write,
        convSet_0_dout => convSet_dout,
        convSet_0_num_data_valid => convSet_num_data_valid,
        convSet_0_fifo_cap => convSet_fifo_cap,
        convSet_0_empty_n => convSet_empty_n,
        convSet_0_read => SystemControl_U0_convSet_0_read,
        convSet_1_dout => convSet_1_dout,
        convSet_1_num_data_valid => convSet_1_num_data_valid,
        convSet_1_fifo_cap => convSet_1_fifo_cap,
        convSet_1_empty_n => convSet_1_empty_n,
        convSet_1_read => SystemControl_U0_convSet_1_read);

    Send_U0 : component TopPL_Send
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Send_U0_ap_start,
        ap_done => Send_U0_ap_done,
        ap_continue => Send_U0_ap_continue,
        ap_idle => Send_U0_ap_idle,
        ap_ready => Send_U0_ap_ready,
        syscontrol_0_dout => syscontrol_dout,
        syscontrol_0_num_data_valid => syscontrol_num_data_valid,
        syscontrol_0_fifo_cap => syscontrol_fifo_cap,
        syscontrol_0_empty_n => syscontrol_empty_n,
        syscontrol_0_read => Send_U0_syscontrol_0_read,
        send_fifo_0_dout => send_fifo_dout,
        send_fifo_0_num_data_valid => send_fifo_num_data_valid,
        send_fifo_0_fifo_cap => send_fifo_fifo_cap,
        send_fifo_0_empty_n => send_fifo_empty_n,
        send_fifo_0_read => Send_U0_send_fifo_0_read,
        send_fifo_1_dout => send_fifo_1_dout,
        send_fifo_1_num_data_valid => send_fifo_1_num_data_valid,
        send_fifo_1_fifo_cap => send_fifo_1_fifo_cap,
        send_fifo_1_empty_n => send_fifo_1_empty_n,
        send_fifo_1_read => Send_U0_send_fifo_1_read,
        sweep_tx0_0_TDATA => Send_U0_sweep_tx0_0_TDATA,
        sweep_tx0_0_TVALID => Send_U0_sweep_tx0_0_TVALID,
        sweep_tx0_0_TREADY => sweep_tx0_0_TREADY,
        sweep_tx0_0_TKEEP => Send_U0_sweep_tx0_0_TKEEP,
        sweep_tx0_0_TSTRB => Send_U0_sweep_tx0_0_TSTRB,
        sweep_tx0_0_TLAST => Send_U0_sweep_tx0_0_TLAST,
        sweep_tx0_1_TDATA => Send_U0_sweep_tx0_1_TDATA,
        sweep_tx0_1_TVALID => Send_U0_sweep_tx0_1_TVALID,
        sweep_tx0_1_TREADY => sweep_tx0_1_TREADY,
        sweep_tx0_1_TKEEP => Send_U0_sweep_tx0_1_TKEEP,
        sweep_tx0_1_TSTRB => Send_U0_sweep_tx0_1_TSTRB,
        sweep_tx0_1_TLAST => Send_U0_sweep_tx0_1_TLAST,
        norm_tx0_TDATA => Send_U0_norm_tx0_TDATA,
        norm_tx0_TVALID => Send_U0_norm_tx0_TVALID,
        norm_tx0_TREADY => norm_tx0_TREADY,
        norm_tx0_TKEEP => Send_U0_norm_tx0_TKEEP,
        norm_tx0_TSTRB => Send_U0_norm_tx0_TSTRB,
        norm_tx0_TLAST => Send_U0_norm_tx0_TLAST);

    RoundRobin_U0 : component TopPL_RoundRobin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => RoundRobin_U0_ap_start,
        ap_done => RoundRobin_U0_ap_done,
        ap_continue => RoundRobin_U0_ap_continue,
        ap_idle => RoundRobin_U0_ap_idle,
        ap_ready => RoundRobin_U0_ap_ready,
        syscontrol_1_dout => syscontrol_1_dout,
        syscontrol_1_num_data_valid => syscontrol_1_num_data_valid,
        syscontrol_1_fifo_cap => syscontrol_1_fifo_cap,
        syscontrol_1_empty_n => syscontrol_1_empty_n,
        syscontrol_1_read => RoundRobin_U0_syscontrol_1_read,
        m_axi_gmem0_AWVALID => RoundRobin_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => RoundRobin_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => RoundRobin_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => RoundRobin_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => RoundRobin_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => RoundRobin_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => RoundRobin_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => RoundRobin_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => RoundRobin_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => RoundRobin_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => RoundRobin_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => RoundRobin_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => RoundRobin_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => RoundRobin_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => RoundRobin_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => RoundRobin_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => RoundRobin_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => RoundRobin_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => RoundRobin_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => RoundRobin_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => RoundRobin_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => RoundRobin_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => RoundRobin_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => RoundRobin_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => RoundRobin_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => RoundRobin_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => RoundRobin_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => RoundRobin_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => RoundRobin_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => RoundRobin_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => RoundRobin_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => RoundRobin_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        dataIn => dataIn,
        m_axi_gmem1_AWVALID => RoundRobin_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => gmem1_AWREADY,
        m_axi_gmem1_AWADDR => RoundRobin_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => RoundRobin_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => RoundRobin_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => RoundRobin_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => RoundRobin_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => RoundRobin_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => RoundRobin_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => RoundRobin_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => RoundRobin_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => RoundRobin_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => RoundRobin_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => RoundRobin_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => gmem1_WREADY,
        m_axi_gmem1_WDATA => RoundRobin_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => RoundRobin_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => RoundRobin_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => RoundRobin_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => RoundRobin_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => RoundRobin_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => RoundRobin_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => RoundRobin_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => RoundRobin_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => RoundRobin_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => RoundRobin_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => RoundRobin_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => RoundRobin_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => RoundRobin_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => RoundRobin_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => RoundRobin_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => RoundRobin_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => RoundRobin_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv512_lc_1,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => ap_const_lv11_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => gmem1_BVALID,
        m_axi_gmem1_BREADY => RoundRobin_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => gmem1_BRESP,
        m_axi_gmem1_BID => gmem1_BID,
        m_axi_gmem1_BUSER => gmem1_BUSER,
        U => U,
        m_axi_gmem2_AWVALID => RoundRobin_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => gmem2_AWREADY,
        m_axi_gmem2_AWADDR => RoundRobin_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => RoundRobin_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => RoundRobin_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => RoundRobin_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => RoundRobin_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => RoundRobin_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => RoundRobin_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => RoundRobin_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => RoundRobin_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => RoundRobin_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => RoundRobin_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => RoundRobin_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => gmem2_WREADY,
        m_axi_gmem2_WDATA => RoundRobin_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => RoundRobin_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => RoundRobin_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => RoundRobin_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => RoundRobin_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => RoundRobin_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => ap_const_logic_0,
        m_axi_gmem2_ARADDR => RoundRobin_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => RoundRobin_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => RoundRobin_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => RoundRobin_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => RoundRobin_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => RoundRobin_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => RoundRobin_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => RoundRobin_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => RoundRobin_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => RoundRobin_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => RoundRobin_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => ap_const_logic_0,
        m_axi_gmem2_RREADY => RoundRobin_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => ap_const_lv512_lc_1,
        m_axi_gmem2_RLAST => ap_const_logic_0,
        m_axi_gmem2_RID => ap_const_lv1_0,
        m_axi_gmem2_RFIFONUM => ap_const_lv11_0,
        m_axi_gmem2_RUSER => ap_const_lv1_0,
        m_axi_gmem2_RRESP => ap_const_lv2_0,
        m_axi_gmem2_BVALID => gmem2_BVALID,
        m_axi_gmem2_BREADY => RoundRobin_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => gmem2_BRESP,
        m_axi_gmem2_BID => gmem2_BID,
        m_axi_gmem2_BUSER => gmem2_BUSER,
        S => S,
        send_fifo_0_din => RoundRobin_U0_send_fifo_0_din,
        send_fifo_0_num_data_valid => send_fifo_num_data_valid,
        send_fifo_0_fifo_cap => send_fifo_fifo_cap,
        send_fifo_0_full_n => send_fifo_full_n,
        send_fifo_0_write => RoundRobin_U0_send_fifo_0_write,
        send_fifo_1_din => RoundRobin_U0_send_fifo_1_din,
        send_fifo_1_num_data_valid => send_fifo_1_num_data_valid,
        send_fifo_1_fifo_cap => send_fifo_1_fifo_cap,
        send_fifo_1_full_n => send_fifo_1_full_n,
        send_fifo_1_write => RoundRobin_U0_send_fifo_1_write,
        receive_fifo_0_dout => receive_fifo_dout,
        receive_fifo_0_num_data_valid => receive_fifo_num_data_valid,
        receive_fifo_0_fifo_cap => receive_fifo_fifo_cap,
        receive_fifo_0_empty_n => receive_fifo_empty_n,
        receive_fifo_0_read => RoundRobin_U0_receive_fifo_0_read,
        receive_fifo_1_dout => receive_fifo_1_dout,
        receive_fifo_1_num_data_valid => receive_fifo_1_num_data_valid,
        receive_fifo_1_fifo_cap => receive_fifo_1_fifo_cap,
        receive_fifo_1_empty_n => receive_fifo_1_empty_n,
        receive_fifo_1_read => RoundRobin_U0_receive_fifo_1_read);

    Receive_U0 : component TopPL_Receive
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Receive_U0_ap_start,
        ap_done => Receive_U0_ap_done,
        ap_continue => Receive_U0_ap_continue,
        ap_idle => Receive_U0_ap_idle,
        ap_ready => Receive_U0_ap_ready,
        syscontrol_2_dout => syscontrol_2_dout,
        syscontrol_2_num_data_valid => syscontrol_2_num_data_valid,
        syscontrol_2_fifo_cap => syscontrol_2_fifo_cap,
        syscontrol_2_empty_n => syscontrol_2_empty_n,
        syscontrol_2_read => Receive_U0_syscontrol_2_read,
        convSet_0_din => Receive_U0_convSet_0_din,
        convSet_0_num_data_valid => convSet_num_data_valid,
        convSet_0_fifo_cap => convSet_fifo_cap,
        convSet_0_full_n => convSet_full_n,
        convSet_0_write => Receive_U0_convSet_0_write,
        convSet_1_din => Receive_U0_convSet_1_din,
        convSet_1_num_data_valid => convSet_1_num_data_valid,
        convSet_1_fifo_cap => convSet_1_fifo_cap,
        convSet_1_full_n => convSet_1_full_n,
        convSet_1_write => Receive_U0_convSet_1_write,
        receive_fifo_0_din => Receive_U0_receive_fifo_0_din,
        receive_fifo_0_num_data_valid => receive_fifo_num_data_valid,
        receive_fifo_0_fifo_cap => receive_fifo_fifo_cap,
        receive_fifo_0_full_n => receive_fifo_full_n,
        receive_fifo_0_write => Receive_U0_receive_fifo_0_write,
        receive_fifo_1_din => Receive_U0_receive_fifo_1_din,
        receive_fifo_1_num_data_valid => receive_fifo_1_num_data_valid,
        receive_fifo_1_fifo_cap => receive_fifo_1_fifo_cap,
        receive_fifo_1_full_n => receive_fifo_1_full_n,
        receive_fifo_1_write => Receive_U0_receive_fifo_1_write,
        sweep_rx0_0_TDATA => sweep_rx0_0_TDATA,
        sweep_rx0_0_TVALID => sweep_rx0_0_TVALID,
        sweep_rx0_0_TREADY => Receive_U0_sweep_rx0_0_TREADY,
        sweep_rx0_0_TKEEP => sweep_rx0_0_TKEEP,
        sweep_rx0_0_TSTRB => sweep_rx0_0_TSTRB,
        sweep_rx0_0_TLAST => sweep_rx0_0_TLAST,
        sweep_rx0_1_TDATA => sweep_rx0_1_TDATA,
        sweep_rx0_1_TVALID => sweep_rx0_1_TVALID,
        sweep_rx0_1_TREADY => Receive_U0_sweep_rx0_1_TREADY,
        sweep_rx0_1_TKEEP => sweep_rx0_1_TKEEP,
        sweep_rx0_1_TSTRB => sweep_rx0_1_TSTRB,
        sweep_rx0_1_TLAST => sweep_rx0_1_TLAST,
        norm_rx0_TDATA => norm_rx0_TDATA,
        norm_rx0_TVALID => norm_rx0_TVALID,
        norm_rx0_TREADY => Receive_U0_norm_rx0_TREADY,
        norm_rx0_TKEEP => norm_rx0_TKEEP,
        norm_rx0_TSTRB => norm_rx0_TSTRB,
        norm_rx0_TLAST => norm_rx0_TLAST);

    syscontrol_U : component TopPL_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SystemControl_U0_syscontrol_0_din,
        if_full_n => syscontrol_full_n,
        if_write => SystemControl_U0_syscontrol_0_write,
        if_dout => syscontrol_dout,
        if_num_data_valid => syscontrol_num_data_valid,
        if_fifo_cap => syscontrol_fifo_cap,
        if_empty_n => syscontrol_empty_n,
        if_read => Send_U0_syscontrol_0_read);

    syscontrol_1_U : component TopPL_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SystemControl_U0_syscontrol_1_din,
        if_full_n => syscontrol_1_full_n,
        if_write => SystemControl_U0_syscontrol_1_write,
        if_dout => syscontrol_1_dout,
        if_num_data_valid => syscontrol_1_num_data_valid,
        if_fifo_cap => syscontrol_1_fifo_cap,
        if_empty_n => syscontrol_1_empty_n,
        if_read => RoundRobin_U0_syscontrol_1_read);

    syscontrol_2_U : component TopPL_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SystemControl_U0_syscontrol_2_din,
        if_full_n => syscontrol_2_full_n,
        if_write => SystemControl_U0_syscontrol_2_write,
        if_dout => syscontrol_2_dout,
        if_num_data_valid => syscontrol_2_num_data_valid,
        if_fifo_cap => syscontrol_2_fifo_cap,
        if_empty_n => syscontrol_2_empty_n,
        if_read => Receive_U0_syscontrol_2_read);

    convSet_U : component TopPL_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Receive_U0_convSet_0_din,
        if_full_n => convSet_full_n,
        if_write => Receive_U0_convSet_0_write,
        if_dout => convSet_dout,
        if_num_data_valid => convSet_num_data_valid,
        if_fifo_cap => convSet_fifo_cap,
        if_empty_n => convSet_empty_n,
        if_read => SystemControl_U0_convSet_0_read);

    convSet_1_U : component TopPL_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Receive_U0_convSet_1_din,
        if_full_n => convSet_1_full_n,
        if_write => Receive_U0_convSet_1_write,
        if_dout => convSet_1_dout,
        if_num_data_valid => convSet_1_num_data_valid,
        if_fifo_cap => convSet_1_fifo_cap,
        if_empty_n => convSet_1_empty_n,
        if_read => SystemControl_U0_convSet_1_read);

    send_fifo_U : component TopPL_fifo_w128_d512_B
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => RoundRobin_U0_send_fifo_0_din,
        if_full_n => send_fifo_full_n,
        if_write => RoundRobin_U0_send_fifo_0_write,
        if_dout => send_fifo_dout,
        if_num_data_valid => send_fifo_num_data_valid,
        if_fifo_cap => send_fifo_fifo_cap,
        if_empty_n => send_fifo_empty_n,
        if_read => Send_U0_send_fifo_0_read);

    send_fifo_1_U : component TopPL_fifo_w128_d512_B
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => RoundRobin_U0_send_fifo_1_din,
        if_full_n => send_fifo_1_full_n,
        if_write => RoundRobin_U0_send_fifo_1_write,
        if_dout => send_fifo_1_dout,
        if_num_data_valid => send_fifo_1_num_data_valid,
        if_fifo_cap => send_fifo_1_fifo_cap,
        if_empty_n => send_fifo_1_empty_n,
        if_read => Send_U0_send_fifo_1_read);

    receive_fifo_U : component TopPL_fifo_w128_d4096_U
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Receive_U0_receive_fifo_0_din,
        if_full_n => receive_fifo_full_n,
        if_write => Receive_U0_receive_fifo_0_write,
        if_dout => receive_fifo_dout,
        if_num_data_valid => receive_fifo_num_data_valid,
        if_fifo_cap => receive_fifo_fifo_cap,
        if_empty_n => receive_fifo_empty_n,
        if_read => RoundRobin_U0_receive_fifo_0_read);

    receive_fifo_1_U : component TopPL_fifo_w128_d4096_U
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Receive_U0_receive_fifo_1_din,
        if_full_n => receive_fifo_1_full_n,
        if_write => Receive_U0_receive_fifo_1_write,
        if_dout => receive_fifo_1_dout,
        if_num_data_valid => receive_fifo_1_num_data_valid,
        if_fifo_cap => receive_fifo_1_fifo_cap,
        if_empty_n => receive_fifo_1_empty_n,
        if_read => RoundRobin_U0_receive_fifo_1_read);

    start_for_Send_U0_U : component TopPL_start_for_Send_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Send_U0_din,
        if_full_n => start_for_Send_U0_full_n,
        if_write => SystemControl_U0_start_write,
        if_dout => start_for_Send_U0_dout,
        if_empty_n => start_for_Send_U0_empty_n,
        if_read => Send_U0_ap_ready);

    start_for_Receive_U0_U : component TopPL_start_for_Receive_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Receive_U0_din,
        if_full_n => start_for_Receive_U0_full_n,
        if_write => SystemControl_U0_start_write,
        if_dout => start_for_Receive_U0_dout,
        if_empty_n => start_for_Receive_U0_empty_n,
        if_read => Receive_U0_ap_ready);





    ap_sync_reg_RoundRobin_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_RoundRobin_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_RoundRobin_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_RoundRobin_U0_ap_ready <= ap_sync_RoundRobin_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_SystemControl_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_SystemControl_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_SystemControl_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_SystemControl_U0_ap_ready <= ap_sync_SystemControl_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    Receive_U0_ap_continue <= ap_sync_continue;
    Receive_U0_ap_start <= start_for_Receive_U0_empty_n;
    RoundRobin_U0_ap_continue <= ap_sync_continue;
    RoundRobin_U0_ap_start <= ((ap_sync_reg_RoundRobin_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Send_U0_ap_continue <= ap_sync_continue;
    Send_U0_ap_start <= start_for_Send_U0_empty_n;
    SystemControl_U0_ap_continue <= ap_sync_continue;
    SystemControl_U0_ap_start <= ((ap_sync_reg_SystemControl_U0_ap_ready xor ap_const_logic_1) and ap_start);
    SystemControl_U0_start_full_n <= (start_for_Send_U0_full_n and start_for_Receive_U0_full_n);
    ap_done <= ap_sync_done;
    ap_idle <= (SystemControl_U0_ap_idle and Send_U0_ap_idle and RoundRobin_U0_ap_idle and Receive_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_RoundRobin_U0_ap_ready <= (ap_sync_reg_RoundRobin_U0_ap_ready or RoundRobin_U0_ap_ready);
    ap_sync_SystemControl_U0_ap_ready <= (ap_sync_reg_SystemControl_U0_ap_ready or SystemControl_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (SystemControl_U0_ap_done and Send_U0_ap_done and RoundRobin_U0_ap_done and Receive_U0_ap_done);
    ap_sync_ready <= (ap_sync_SystemControl_U0_ap_ready and ap_sync_RoundRobin_U0_ap_ready);
    gmem0_RID <= ap_const_lv1_0;
    gmem0_RLAST <= ap_const_logic_0;
    gmem0_RRESP <= ap_const_lv2_0;
    gmem0_RUSER <= ap_const_lv1_0;
    gmem1_BID <= ap_const_lv1_0;
    gmem1_BRESP <= ap_const_lv2_0;
    gmem1_BUSER <= ap_const_lv1_0;
    gmem2_BID <= ap_const_lv1_0;
    gmem2_BRESP <= ap_const_lv2_0;
    gmem2_BUSER <= ap_const_lv1_0;
    gmem3_BID <= ap_const_lv1_0;
    gmem3_BRESP <= ap_const_lv2_0;
    gmem3_BUSER <= ap_const_lv1_0;
    norm_rx0_TREADY <= Receive_U0_norm_rx0_TREADY;
    norm_tx0_TDATA <= Send_U0_norm_tx0_TDATA;
    norm_tx0_TKEEP <= Send_U0_norm_tx0_TKEEP;
    norm_tx0_TLAST <= Send_U0_norm_tx0_TLAST;
    norm_tx0_TSTRB <= Send_U0_norm_tx0_TSTRB;
    norm_tx0_TVALID <= Send_U0_norm_tx0_TVALID;
    start_for_Receive_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Send_U0_din <= (0=>ap_const_logic_1, others=>'-');
    sweep_rx0_0_TREADY <= Receive_U0_sweep_rx0_0_TREADY;
    sweep_rx0_1_TREADY <= Receive_U0_sweep_rx0_1_TREADY;
    sweep_tx0_0_TDATA <= Send_U0_sweep_tx0_0_TDATA;
    sweep_tx0_0_TKEEP <= Send_U0_sweep_tx0_0_TKEEP;
    sweep_tx0_0_TLAST <= Send_U0_sweep_tx0_0_TLAST;
    sweep_tx0_0_TSTRB <= Send_U0_sweep_tx0_0_TSTRB;
    sweep_tx0_0_TVALID <= Send_U0_sweep_tx0_0_TVALID;
    sweep_tx0_1_TDATA <= Send_U0_sweep_tx0_1_TDATA;
    sweep_tx0_1_TKEEP <= Send_U0_sweep_tx0_1_TKEEP;
    sweep_tx0_1_TLAST <= Send_U0_sweep_tx0_1_TLAST;
    sweep_tx0_1_TSTRB <= Send_U0_sweep_tx0_1_TSTRB;
    sweep_tx0_1_TVALID <= Send_U0_sweep_tx0_1_TVALID;
end behav;
