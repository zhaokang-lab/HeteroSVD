-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_Send is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    syscontrol_0_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    syscontrol_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    syscontrol_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    syscontrol_0_empty_n : IN STD_LOGIC;
    syscontrol_0_read : OUT STD_LOGIC;
    send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    send_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    send_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    send_fifo_0_empty_n : IN STD_LOGIC;
    send_fifo_0_read : OUT STD_LOGIC;
    send_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    send_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    send_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    send_fifo_1_empty_n : IN STD_LOGIC;
    send_fifo_1_read : OUT STD_LOGIC;
    sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_0_TVALID : OUT STD_LOGIC;
    sweep_tx0_0_TREADY : IN STD_LOGIC;
    sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_1_TVALID : OUT STD_LOGIC;
    sweep_tx0_1_TREADY : IN STD_LOGIC;
    sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    norm_tx0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    norm_tx0_TVALID : OUT STD_LOGIC;
    norm_tx0_TREADY : IN STD_LOGIC;
    norm_tx0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    norm_tx0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    norm_tx0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of TopPL_Send is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal syscontrol_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_94_send_fifo_0_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_send_fifo_1_read : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_94_ap_continue : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_ap_start : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_ap_done : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_ap_idle : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_ap_ready : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_send_fifo_0_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_send2AIE_3_fu_118_send_fifo_0_empty_n : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_send_fifo_0_read : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_norm_tx0_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_send2AIE_3_fu_118_norm_tx0_TVALID : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_norm_tx0_TREADY : STD_LOGIC;
    signal grp_send2AIE_3_fu_118_norm_tx0_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_send2AIE_3_fu_118_norm_tx0_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_send2AIE_3_fu_118_norm_tx0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal sig_read_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done : STD_LOGIC := '0';
    signal grp_send2AIE_3_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln179_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_84 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_14_fu_153_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal regslice_both_sweep_tx0_0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_norm_tx0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal sweep_tx0_0_TVALID_int_regslice : STD_LOGIC;
    signal sweep_tx0_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_0_V_last_V_U_vld_out : STD_LOGIC;
    signal sweep_tx0_1_TVALID_int_regslice : STD_LOGIC;
    signal sweep_tx0_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_sweep_tx0_1_V_last_V_U_vld_out : STD_LOGIC;
    signal norm_tx0_TVALID_int_regslice : STD_LOGIC;
    signal norm_tx0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_norm_tx0_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_tx0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_norm_tx0_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_norm_tx0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_tx0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_norm_tx0_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_norm_tx0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_tx0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_norm_tx0_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_norm_tx0_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_dataflow_parent_loop_proc IS
    port (
        send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_0_empty_n : IN STD_LOGIC;
        send_fifo_0_read : OUT STD_LOGIC;
        sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        send_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_1_empty_n : IN STD_LOGIC;
        send_fifo_1_read : OUT STD_LOGIC;
        sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        sweep_tx0_0_TVALID : OUT STD_LOGIC;
        sweep_tx0_0_TREADY : IN STD_LOGIC;
        sweep_tx0_1_TVALID : OUT STD_LOGIC;
        sweep_tx0_1_TREADY : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component TopPL_send2AIE_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_empty_n : IN STD_LOGIC;
        send_fifo_0_read : OUT STD_LOGIC;
        norm_tx0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        norm_tx0_TVALID : OUT STD_LOGIC;
        norm_tx0_TREADY : IN STD_LOGIC;
        norm_tx0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        norm_tx0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        norm_tx0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TopPL_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc_fu_94 : component TopPL_dataflow_parent_loop_proc
    port map (
        send_fifo_0_dout => send_fifo_0_dout,
        send_fifo_0_empty_n => send_fifo_0_empty_n,
        send_fifo_0_read => grp_dataflow_parent_loop_proc_fu_94_send_fifo_0_read,
        sweep_tx0_0_TDATA => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TDATA,
        sweep_tx0_0_TKEEP => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TKEEP,
        sweep_tx0_0_TSTRB => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TSTRB,
        sweep_tx0_0_TLAST => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TLAST,
        send_fifo_1_dout => send_fifo_1_dout,
        send_fifo_1_empty_n => send_fifo_1_empty_n,
        send_fifo_1_read => grp_dataflow_parent_loop_proc_fu_94_send_fifo_1_read,
        sweep_tx0_1_TDATA => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TDATA,
        sweep_tx0_1_TKEEP => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TKEEP,
        sweep_tx0_1_TSTRB => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TSTRB,
        sweep_tx0_1_TLAST => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TLAST,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        sweep_tx0_0_TVALID => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID,
        sweep_tx0_0_TREADY => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TREADY,
        sweep_tx0_1_TVALID => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID,
        sweep_tx0_1_TREADY => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TREADY,
        ap_start => grp_dataflow_parent_loop_proc_fu_94_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_94_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_94_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_94_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_94_ap_continue);

    grp_send2AIE_3_fu_118 : component TopPL_send2AIE_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_send2AIE_3_fu_118_ap_start,
        ap_done => grp_send2AIE_3_fu_118_ap_done,
        ap_idle => grp_send2AIE_3_fu_118_ap_idle,
        ap_ready => grp_send2AIE_3_fu_118_ap_ready,
        send_fifo_0_dout => grp_send2AIE_3_fu_118_send_fifo_0_dout,
        send_fifo_0_num_data_valid => ap_const_lv10_0,
        send_fifo_0_fifo_cap => ap_const_lv10_0,
        send_fifo_0_empty_n => grp_send2AIE_3_fu_118_send_fifo_0_empty_n,
        send_fifo_0_read => grp_send2AIE_3_fu_118_send_fifo_0_read,
        norm_tx0_TDATA => grp_send2AIE_3_fu_118_norm_tx0_TDATA,
        norm_tx0_TVALID => grp_send2AIE_3_fu_118_norm_tx0_TVALID,
        norm_tx0_TREADY => grp_send2AIE_3_fu_118_norm_tx0_TREADY,
        norm_tx0_TKEEP => grp_send2AIE_3_fu_118_norm_tx0_TKEEP,
        norm_tx0_TSTRB => grp_send2AIE_3_fu_118_norm_tx0_TSTRB,
        norm_tx0_TLAST => grp_send2AIE_3_fu_118_norm_tx0_TLAST);

    regslice_both_sweep_tx0_0_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TDATA,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID,
        ack_in => sweep_tx0_0_TREADY_int_regslice,
        data_out => sweep_tx0_0_TDATA,
        vld_out => regslice_both_sweep_tx0_0_V_data_V_U_vld_out,
        ack_out => sweep_tx0_0_TREADY,
        apdone_blk => regslice_both_sweep_tx0_0_V_data_V_U_apdone_blk);

    regslice_both_sweep_tx0_0_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TKEEP,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID,
        ack_in => regslice_both_sweep_tx0_0_V_keep_V_U_ack_in_dummy,
        data_out => sweep_tx0_0_TKEEP,
        vld_out => regslice_both_sweep_tx0_0_V_keep_V_U_vld_out,
        ack_out => sweep_tx0_0_TREADY,
        apdone_blk => regslice_both_sweep_tx0_0_V_keep_V_U_apdone_blk);

    regslice_both_sweep_tx0_0_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TSTRB,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID,
        ack_in => regslice_both_sweep_tx0_0_V_strb_V_U_ack_in_dummy,
        data_out => sweep_tx0_0_TSTRB,
        vld_out => regslice_both_sweep_tx0_0_V_strb_V_U_vld_out,
        ack_out => sweep_tx0_0_TREADY,
        apdone_blk => regslice_both_sweep_tx0_0_V_strb_V_U_apdone_blk);

    regslice_both_sweep_tx0_0_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TLAST,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID,
        ack_in => regslice_both_sweep_tx0_0_V_last_V_U_ack_in_dummy,
        data_out => sweep_tx0_0_TLAST,
        vld_out => regslice_both_sweep_tx0_0_V_last_V_U_vld_out,
        ack_out => sweep_tx0_0_TREADY,
        apdone_blk => regslice_both_sweep_tx0_0_V_last_V_U_apdone_blk);

    regslice_both_sweep_tx0_1_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TDATA,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID,
        ack_in => sweep_tx0_1_TREADY_int_regslice,
        data_out => sweep_tx0_1_TDATA,
        vld_out => regslice_both_sweep_tx0_1_V_data_V_U_vld_out,
        ack_out => sweep_tx0_1_TREADY,
        apdone_blk => regslice_both_sweep_tx0_1_V_data_V_U_apdone_blk);

    regslice_both_sweep_tx0_1_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TKEEP,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID,
        ack_in => regslice_both_sweep_tx0_1_V_keep_V_U_ack_in_dummy,
        data_out => sweep_tx0_1_TKEEP,
        vld_out => regslice_both_sweep_tx0_1_V_keep_V_U_vld_out,
        ack_out => sweep_tx0_1_TREADY,
        apdone_blk => regslice_both_sweep_tx0_1_V_keep_V_U_apdone_blk);

    regslice_both_sweep_tx0_1_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TSTRB,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID,
        ack_in => regslice_both_sweep_tx0_1_V_strb_V_U_ack_in_dummy,
        data_out => sweep_tx0_1_TSTRB,
        vld_out => regslice_both_sweep_tx0_1_V_strb_V_U_vld_out,
        ack_out => sweep_tx0_1_TREADY,
        apdone_blk => regslice_both_sweep_tx0_1_V_strb_V_U_apdone_blk);

    regslice_both_sweep_tx0_1_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TLAST,
        vld_in => grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID,
        ack_in => regslice_both_sweep_tx0_1_V_last_V_U_ack_in_dummy,
        data_out => sweep_tx0_1_TLAST,
        vld_out => regslice_both_sweep_tx0_1_V_last_V_U_vld_out,
        ack_out => sweep_tx0_1_TREADY,
        apdone_blk => regslice_both_sweep_tx0_1_V_last_V_U_apdone_blk);

    regslice_both_norm_tx0_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_send2AIE_3_fu_118_norm_tx0_TDATA,
        vld_in => norm_tx0_TVALID_int_regslice,
        ack_in => norm_tx0_TREADY_int_regslice,
        data_out => norm_tx0_TDATA,
        vld_out => regslice_both_norm_tx0_V_data_V_U_vld_out,
        ack_out => norm_tx0_TREADY,
        apdone_blk => regslice_both_norm_tx0_V_data_V_U_apdone_blk);

    regslice_both_norm_tx0_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_send2AIE_3_fu_118_norm_tx0_TKEEP,
        vld_in => norm_tx0_TVALID_int_regslice,
        ack_in => regslice_both_norm_tx0_V_keep_V_U_ack_in_dummy,
        data_out => norm_tx0_TKEEP,
        vld_out => regslice_both_norm_tx0_V_keep_V_U_vld_out,
        ack_out => norm_tx0_TREADY,
        apdone_blk => regslice_both_norm_tx0_V_keep_V_U_apdone_blk);

    regslice_both_norm_tx0_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_send2AIE_3_fu_118_norm_tx0_TSTRB,
        vld_in => norm_tx0_TVALID_int_regslice,
        ack_in => regslice_both_norm_tx0_V_strb_V_U_ack_in_dummy,
        data_out => norm_tx0_TSTRB,
        vld_out => regslice_both_norm_tx0_V_strb_V_U_vld_out,
        ack_out => norm_tx0_TREADY,
        apdone_blk => regslice_both_norm_tx0_V_strb_V_U_apdone_blk);

    regslice_both_norm_tx0_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_send2AIE_3_fu_118_norm_tx0_TLAST,
        vld_in => norm_tx0_TVALID_int_regslice,
        ack_in => regslice_both_norm_tx0_V_last_V_U_ack_in_dummy,
        data_out => norm_tx0_TLAST,
        vld_out => regslice_both_norm_tx0_V_last_V_U_vld_out,
        ack_out => norm_tx0_TREADY,
        apdone_blk => regslice_both_norm_tx0_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_94_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_94_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_ready = ap_const_logic_0)) or ((syscontrol_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_88_p2 = ap_const_lv1_1)))) then 
                    grp_dataflow_parent_loop_proc_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_send2AIE_3_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_send2AIE_3_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln179_fu_159_p2 = ap_const_lv1_0)))) then 
                    grp_send2AIE_3_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_send2AIE_3_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_send2AIE_3_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((syscontrol_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_88_p2 = ap_const_lv1_0))) then 
                i_fu_84 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln179_fu_159_p2 = ap_const_lv1_0))) then 
                i_fu_84 <= i_14_fu_153_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, syscontrol_0_empty_n, ap_CS_fsm_state2, grp_send2AIE_3_fu_118_ap_done, sig_read_fu_88_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4, icmp_ln179_fu_159_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_block_state8, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((syscontrol_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_88_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((syscontrol_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_88_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln179_fu_159_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_send2AIE_3_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_send2AIE_3_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(syscontrol_0_empty_n)
    begin
        if ((syscontrol_0_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_send2AIE_3_fu_118_ap_done)
    begin
        if ((grp_send2AIE_3_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_send2AIE_3_fu_118_ap_done)
    begin
        if ((grp_send2AIE_3_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8)
    begin
        if ((ap_const_boolean_1 = ap_block_state8)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state8_assign_proc : process(regslice_both_sweep_tx0_0_V_data_V_U_apdone_blk, regslice_both_sweep_tx0_1_V_data_V_U_apdone_blk, regslice_both_norm_tx0_V_data_V_U_apdone_blk)
    begin
                ap_block_state8 <= ((regslice_both_norm_tx0_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_sweep_tx0_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_sweep_tx0_0_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8, ap_block_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, ap_block_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_done <= (grp_dataflow_parent_loop_proc_fu_94_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_94_ap_ready <= (grp_dataflow_parent_loop_proc_fu_94_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_94_ap_ready);

    grp_dataflow_parent_loop_proc_fu_94_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc_fu_94_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_94_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_94_ap_start <= grp_dataflow_parent_loop_proc_fu_94_ap_start_reg;
    grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TREADY <= (sweep_tx0_0_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TREADY <= (sweep_tx0_1_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_send2AIE_3_fu_118_ap_start <= grp_send2AIE_3_fu_118_ap_start_reg;
    grp_send2AIE_3_fu_118_norm_tx0_TREADY <= ((norm_tx0_TREADY_int_regslice and ap_CS_fsm_state7) or (norm_tx0_TREADY_int_regslice and ap_CS_fsm_state5));

    grp_send2AIE_3_fu_118_send_fifo_0_dout_assign_proc : process(send_fifo_0_dout, send_fifo_1_dout, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_send2AIE_3_fu_118_send_fifo_0_dout <= send_fifo_1_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_send2AIE_3_fu_118_send_fifo_0_dout <= send_fifo_0_dout;
        else 
            grp_send2AIE_3_fu_118_send_fifo_0_dout <= send_fifo_1_dout;
        end if; 
    end process;


    grp_send2AIE_3_fu_118_send_fifo_0_empty_n_assign_proc : process(send_fifo_0_empty_n, send_fifo_1_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_send2AIE_3_fu_118_send_fifo_0_empty_n <= send_fifo_1_empty_n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_send2AIE_3_fu_118_send_fifo_0_empty_n <= send_fifo_0_empty_n;
        else 
            grp_send2AIE_3_fu_118_send_fifo_0_empty_n <= send_fifo_1_empty_n;
        end if; 
    end process;

    i_14_fu_153_p2 <= std_logic_vector(unsigned(i_fu_84) + unsigned(ap_const_lv4_1));
    icmp_ln179_fu_159_p2 <= "1" when (i_fu_84 = ap_const_lv4_8) else "0";
    norm_tx0_TVALID <= regslice_both_norm_tx0_V_data_V_U_vld_out;

    norm_tx0_TVALID_int_regslice_assign_proc : process(grp_send2AIE_3_fu_118_norm_tx0_TVALID, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            norm_tx0_TVALID_int_regslice <= grp_send2AIE_3_fu_118_norm_tx0_TVALID;
        else 
            norm_tx0_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    send_fifo_0_read_assign_proc : process(grp_dataflow_parent_loop_proc_fu_94_send_fifo_0_read, grp_send2AIE_3_fu_118_send_fifo_0_read, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            send_fifo_0_read <= grp_send2AIE_3_fu_118_send_fifo_0_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            send_fifo_0_read <= grp_dataflow_parent_loop_proc_fu_94_send_fifo_0_read;
        else 
            send_fifo_0_read <= ap_const_logic_0;
        end if; 
    end process;


    send_fifo_1_read_assign_proc : process(grp_dataflow_parent_loop_proc_fu_94_send_fifo_1_read, grp_send2AIE_3_fu_118_send_fifo_0_read, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            send_fifo_1_read <= grp_send2AIE_3_fu_118_send_fifo_0_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            send_fifo_1_read <= grp_dataflow_parent_loop_proc_fu_94_send_fifo_1_read;
        else 
            send_fifo_1_read <= ap_const_logic_0;
        end if; 
    end process;

    sig_read_fu_88_p2 <= syscontrol_0_dout;
    sweep_tx0_0_TVALID <= regslice_both_sweep_tx0_0_V_data_V_U_vld_out;
    sweep_tx0_0_TVALID_int_regslice <= grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_0_TVALID;
    sweep_tx0_1_TVALID <= regslice_both_sweep_tx0_1_V_data_V_U_vld_out;
    sweep_tx0_1_TVALID_int_regslice <= grp_dataflow_parent_loop_proc_fu_94_sweep_tx0_1_TVALID;

    syscontrol_0_blk_n_assign_proc : process(syscontrol_0_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            syscontrol_0_blk_n <= syscontrol_0_empty_n;
        else 
            syscontrol_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    syscontrol_0_read_assign_proc : process(syscontrol_0_empty_n, ap_CS_fsm_state2)
    begin
        if (((syscontrol_0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            syscontrol_0_read <= ap_const_logic_1;
        else 
            syscontrol_0_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
