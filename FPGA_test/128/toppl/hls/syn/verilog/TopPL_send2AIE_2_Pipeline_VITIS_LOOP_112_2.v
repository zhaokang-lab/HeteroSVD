// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module TopPL_send2AIE_2_Pipeline_VITIS_LOOP_112_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        send_fifo_1_dout,
        send_fifo_1_num_data_valid,
        send_fifo_1_fifo_cap,
        send_fifo_1_empty_n,
        send_fifo_1_read,
        sweep_tx0_1_TREADY,
        data_temp_address0,
        data_temp_ce0,
        data_temp_we0,
        data_temp_d0,
        data_temp_address1,
        data_temp_ce1,
        data_temp_q1,
        sweep_tx0_1_TDATA,
        sweep_tx0_1_TVALID,
        sweep_tx0_1_TKEEP,
        sweep_tx0_1_TSTRB,
        sweep_tx0_1_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] send_fifo_1_dout;
input  [9:0] send_fifo_1_num_data_valid;
input  [9:0] send_fifo_1_fifo_cap;
input   send_fifo_1_empty_n;
output   send_fifo_1_read;
input   sweep_tx0_1_TREADY;
output  [0:0] data_temp_address0;
output   data_temp_ce0;
output   data_temp_we0;
output  [127:0] data_temp_d0;
output  [0:0] data_temp_address1;
output   data_temp_ce1;
input  [127:0] data_temp_q1;
output  [127:0] sweep_tx0_1_TDATA;
output   sweep_tx0_1_TVALID;
output  [15:0] sweep_tx0_1_TKEEP;
output  [15:0] sweep_tx0_1_TSTRB;
output  [0:0] sweep_tx0_1_TLAST;

reg ap_idle;
reg send_fifo_1_read;
reg data_temp_ce0;
reg data_temp_we0;
reg data_temp_ce1;
reg sweep_tx0_1_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    send_fifo_1_blk_n;
wire    ap_block_pp0_stage0;
reg    sweep_tx0_1_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln112_fu_162_p1;
reg   [0:0] trunc_ln112_reg_244;
reg   [0:0] trunc_ln112_reg_244_pp0_iter1_reg;
reg   [127:0] send_fifo_1_read_reg_250;
wire   [95:0] trunc_ln118_fu_180_p1;
reg   [95:0] trunc_ln118_reg_256;
reg   [95:0] trunc_ln118_reg_256_pp0_iter2_reg;
reg   [95:0] trunc_ln118_reg_256_pp0_iter3_reg;
reg   [31:0] tmp_s_reg_266;
wire   [63:0] zext_ln114_fu_184_p1;
wire   [63:0] zext_ln115_fu_200_p1;
reg   [5:0] j_fu_78;
wire   [5:0] j_6_fu_156_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_5;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] rem27_urem_fu_195_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_78 = 6'd0;
#0 ap_done_reg = 1'b0;
end

TopPL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln112_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_78 <= j_6_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_78 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        send_fifo_1_read_reg_250 <= send_fifo_1_dout;
        trunc_ln112_reg_244 <= trunc_ln112_fu_162_p1;
        trunc_ln112_reg_244_pp0_iter1_reg <= trunc_ln112_reg_244;
        trunc_ln118_reg_256 <= trunc_ln118_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        tmp_s_reg_266 <= {{data_temp_q1[127:96]}};
        trunc_ln118_reg_256_pp0_iter2_reg <= trunc_ln118_reg_256;
        trunc_ln118_reg_256_pp0_iter3_reg <= trunc_ln118_reg_256_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_5 = 6'd1;
    end else begin
        ap_sig_allocacmp_j_5 = j_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_temp_ce0 = 1'b1;
    end else begin
        data_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_temp_ce1 = 1'b1;
    end else begin
        data_temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_temp_we0 = 1'b1;
    end else begin
        data_temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        send_fifo_1_blk_n = send_fifo_1_empty_n;
    end else begin
        send_fifo_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        send_fifo_1_read = 1'b1;
    end else begin
        send_fifo_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        sweep_tx0_1_TDATA_blk_n = sweep_tx0_1_TREADY;
    end else begin
        sweep_tx0_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        sweep_tx0_1_TVALID = 1'b1;
    end else begin
        sweep_tx0_1_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((sweep_tx0_1_TREADY == 1'b0) | (1'b1 == ap_block_state5_pp0_stage0_iter4))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((sweep_tx0_1_TREADY == 1'b0) | (1'b1 == ap_block_state5_pp0_stage0_iter4))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (send_fifo_1_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (sweep_tx0_1_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_temp_address0 = zext_ln114_fu_184_p1;

assign data_temp_address1 = zext_ln115_fu_200_p1;

assign data_temp_d0 = send_fifo_1_read_reg_250;

assign icmp_ln112_fu_150_p2 = ((ap_sig_allocacmp_j_5 == 6'd32) ? 1'b1 : 1'b0);

assign j_6_fu_156_p2 = (ap_sig_allocacmp_j_5 + 6'd1);

assign rem27_urem_fu_195_p2 = (trunc_ln112_reg_244_pp0_iter1_reg ^ 1'd1);

assign sweep_tx0_1_TDATA = {{trunc_ln118_reg_256_pp0_iter3_reg}, {tmp_s_reg_266}};

assign sweep_tx0_1_TKEEP = 16'd65535;

assign sweep_tx0_1_TLAST = 1'd0;

assign sweep_tx0_1_TSTRB = 'bx;

assign trunc_ln112_fu_162_p1 = ap_sig_allocacmp_j_5[0:0];

assign trunc_ln118_fu_180_p1 = send_fifo_1_dout[95:0];

assign zext_ln114_fu_184_p1 = trunc_ln112_reg_244_pp0_iter1_reg;

assign zext_ln115_fu_200_p1 = rem27_urem_fu_195_p2;

endmodule //TopPL_send2AIE_2_Pipeline_VITIS_LOOP_112_2
