// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module TopPL_receive4DDR_Pipeline_VITIS_LOOP_39_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        norm_rx0_TVALID,
        receive_fifo_0_din,
        receive_fifo_0_num_data_valid,
        receive_fifo_0_fifo_cap,
        receive_fifo_0_full_n,
        receive_fifo_0_write,
        data_temp_1,
        data_temp_2,
        norm_rx0_TDATA,
        norm_rx0_TREADY,
        norm_rx0_TKEEP,
        norm_rx0_TSTRB,
        norm_rx0_TLAST,
        data_temp_5_out,
        data_temp_5_out_ap_vld,
        data_temp_4_out_i,
        data_temp_4_out_o,
        data_temp_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   norm_rx0_TVALID;
output  [127:0] receive_fifo_0_din;
input  [12:0] receive_fifo_0_num_data_valid;
input  [12:0] receive_fifo_0_fifo_cap;
input   receive_fifo_0_full_n;
output   receive_fifo_0_write;
input  [127:0] data_temp_1;
input  [127:0] data_temp_2;
input  [127:0] norm_rx0_TDATA;
output   norm_rx0_TREADY;
input  [15:0] norm_rx0_TKEEP;
input  [15:0] norm_rx0_TSTRB;
input  [0:0] norm_rx0_TLAST;
output  [127:0] data_temp_5_out;
output   data_temp_5_out_ap_vld;
input  [127:0] data_temp_4_out_i;
output  [127:0] data_temp_4_out_o;
output   data_temp_4_out_o_ap_vld;

reg ap_idle;
reg receive_fifo_0_write;
reg norm_rx0_TREADY;
reg data_temp_5_out_ap_vld;
reg[127:0] data_temp_4_out_o;
reg data_temp_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln39_fu_178_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    norm_rx0_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    receive_fifo_0_blk_n;
wire   [0:0] trunc_ln39_fu_190_p1;
reg   [0:0] trunc_ln39_reg_357;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] trunc_ln42_fu_200_p1;
reg   [31:0] trunc_ln42_reg_365;
reg   [95:0] tmp_2_reg_370;
wire   [127:0] data_temp_4_fu_284_p3;
wire    ap_loop_init;
reg   [5:0] j_03_fu_84;
wire   [5:0] j_7_fu_184_p2;
reg   [5:0] ap_sig_allocacmp_j;
reg   [127:0] data_temp_fu_88;
wire   [127:0] data_temp_5_fu_277_p3;
wire   [127:0] data_temp_3_fu_247_p5;
reg    ap_block_pp0_stage0_01001;
wire   [127:0] select_ln42_fu_240_p3;
wire   [127:0] select_ln43_fu_259_p3;
wire   [127:0] tmp_1_fu_266_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 j_03_fu_84 = 6'd0;
#0 data_temp_fu_88 = 128'd0;
#0 ap_done_reg = 1'b0;
end

TopPL_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            data_temp_fu_88 <= data_temp_1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            data_temp_fu_88 <= data_temp_5_fu_277_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln39_fu_178_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            j_03_fu_84 <= j_7_fu_184_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_03_fu_84 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_370 <= {{norm_rx0_TDATA[127:32]}};
        trunc_ln39_reg_357 <= trunc_ln39_fu_190_p1;
        trunc_ln42_reg_365 <= trunc_ln42_fu_200_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln39_fu_178_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 6'd1;
    end else begin
        ap_sig_allocacmp_j = j_03_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            data_temp_4_out_o = data_temp_2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            data_temp_4_out_o = data_temp_4_fu_284_p3;
        end else begin
            data_temp_4_out_o = data_temp_4_out_i;
        end
    end else begin
        data_temp_4_out_o = data_temp_4_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        data_temp_4_out_o_ap_vld = 1'b1;
    end else begin
        data_temp_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_temp_5_out_ap_vld = 1'b1;
    end else begin
        data_temp_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln39_fu_178_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        norm_rx0_TDATA_blk_n = norm_rx0_TVALID;
    end else begin
        norm_rx0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln39_fu_178_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        norm_rx0_TREADY = 1'b1;
    end else begin
        norm_rx0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        receive_fifo_0_blk_n = receive_fifo_0_full_n;
    end else begin
        receive_fifo_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        receive_fifo_0_write = 1'b1;
    end else begin
        receive_fifo_0_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln39_fu_178_p2 == 1'd0) & (norm_rx0_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (receive_fifo_0_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_temp_3_fu_247_p5 = {{trunc_ln42_reg_365}, {select_ln42_fu_240_p3[95:0]}};

assign data_temp_4_fu_284_p3 = ((trunc_ln39_reg_357[0:0] == 1'b1) ? data_temp_3_fu_247_p5 : tmp_1_fu_266_p5);

assign data_temp_5_fu_277_p3 = ((trunc_ln39_reg_357[0:0] == 1'b1) ? tmp_1_fu_266_p5 : data_temp_3_fu_247_p5);

assign data_temp_5_out = data_temp_fu_88;

assign icmp_ln39_fu_178_p2 = ((ap_sig_allocacmp_j == 6'd32) ? 1'b1 : 1'b0);

assign j_7_fu_184_p2 = (ap_sig_allocacmp_j + 6'd1);

assign receive_fifo_0_din = data_temp_3_fu_247_p5;

assign select_ln42_fu_240_p3 = ((trunc_ln39_reg_357[0:0] == 1'b1) ? data_temp_4_out_i : data_temp_fu_88);

assign select_ln43_fu_259_p3 = ((trunc_ln39_reg_357[0:0] == 1'b1) ? data_temp_fu_88 : data_temp_4_out_i);

assign tmp_1_fu_266_p5 = {{select_ln43_fu_259_p3[127:96]}, {tmp_2_reg_370}};

assign trunc_ln39_fu_190_p1 = ap_sig_allocacmp_j[0:0];

assign trunc_ln42_fu_200_p1 = norm_rx0_TDATA[31:0];

endmodule //TopPL_receive4DDR_Pipeline_VITIS_LOOP_39_2
