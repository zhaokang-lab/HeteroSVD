-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_receive4AIE_Pipeline_VITIS_LOOP_76_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sweep_rx0_1_TVALID : IN STD_LOGIC;
    receive_fifo_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    receive_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_1_full_n : IN STD_LOGIC;
    receive_fifo_1_write : OUT STD_LOGIC;
    data_temp_17 : IN STD_LOGIC_VECTOR (127 downto 0);
    data_temp_18 : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_1_TREADY : OUT STD_LOGIC;
    sweep_rx0_1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_temp_21_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    data_temp_21_out_ap_vld : OUT STD_LOGIC;
    data_temp_20_out_i : IN STD_LOGIC_VECTOR (127 downto 0);
    data_temp_20_out_o : OUT STD_LOGIC_VECTOR (127 downto 0);
    data_temp_20_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TopPL_receive4AIE_Pipeline_VITIS_LOOP_76_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln76_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sweep_rx0_1_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal receive_fifo_1_blk_n : STD_LOGIC;
    signal trunc_ln76_fu_190_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln76_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln79_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln79_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_370 : STD_LOGIC_VECTOR (95 downto 0);
    signal data_temp_8_fu_284_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_02_fu_84 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal j_8_fu_184_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (5 downto 0);
    signal data_temp_fu_88 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal data_temp_9_fu_277_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_temp_7_fu_247_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln79_fu_240_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_fu_259_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_7_fu_266_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component TopPL_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    data_temp_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    data_temp_fu_88 <= data_temp_17;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    data_temp_fu_88 <= data_temp_9_fu_277_p3;
                end if;
            end if; 
        end if;
    end process;

    j_02_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln76_fu_178_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    j_02_fu_84 <= j_8_fu_184_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_02_fu_84 <= ap_const_lv6_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_8_reg_370 <= sweep_rx0_1_TDATA(127 downto 32);
                trunc_ln76_reg_357 <= trunc_ln76_fu_190_p1;
                trunc_ln79_reg_365 <= trunc_ln79_fu_200_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(sweep_rx0_1_TVALID, icmp_ln76_fu_178_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln76_fu_178_p2 = ap_const_lv1_0) and (sweep_rx0_1_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(receive_fifo_1_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (receive_fifo_1_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln76_fu_178_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln76_fu_178_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_02_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j <= ap_const_lv6_1;
        else 
            ap_sig_allocacmp_j <= j_02_fu_84;
        end if; 
    end process;


    data_temp_20_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_temp_18, data_temp_20_out_i, ap_block_pp0_stage0, data_temp_8_fu_284_p3, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                data_temp_20_out_o <= data_temp_18;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                data_temp_20_out_o <= data_temp_8_fu_284_p3;
            else 
                data_temp_20_out_o <= data_temp_20_out_i;
            end if;
        else 
            data_temp_20_out_o <= data_temp_20_out_i;
        end if; 
    end process;


    data_temp_20_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            data_temp_20_out_o_ap_vld <= ap_const_logic_1;
        else 
            data_temp_20_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_temp_21_out <= data_temp_fu_88;

    data_temp_21_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln76_fu_178_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_temp_21_out_ap_vld <= ap_const_logic_1;
        else 
            data_temp_21_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_temp_7_fu_247_p5 <= (trunc_ln79_reg_365 & select_ln79_fu_240_p3(95 downto 0));
    data_temp_8_fu_284_p3 <= 
        data_temp_7_fu_247_p5 when (trunc_ln76_reg_357(0) = '1') else 
        tmp_7_fu_266_p5;
    data_temp_9_fu_277_p3 <= 
        tmp_7_fu_266_p5 when (trunc_ln76_reg_357(0) = '1') else 
        data_temp_7_fu_247_p5;
    icmp_ln76_fu_178_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv6_20) else "0";
    j_8_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv6_1));

    receive_fifo_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, receive_fifo_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            receive_fifo_1_blk_n <= receive_fifo_1_full_n;
        else 
            receive_fifo_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    receive_fifo_1_din <= data_temp_7_fu_247_p5;

    receive_fifo_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            receive_fifo_1_write <= ap_const_logic_1;
        else 
            receive_fifo_1_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln79_fu_240_p3 <= 
        data_temp_20_out_i when (trunc_ln76_reg_357(0) = '1') else 
        data_temp_fu_88;
    select_ln80_fu_259_p3 <= 
        data_temp_fu_88 when (trunc_ln76_reg_357(0) = '1') else 
        data_temp_20_out_i;

    sweep_rx0_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, sweep_rx0_1_TVALID, icmp_ln76_fu_178_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sweep_rx0_1_TDATA_blk_n <= sweep_rx0_1_TVALID;
        else 
            sweep_rx0_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sweep_rx0_1_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln76_fu_178_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sweep_rx0_1_TREADY <= ap_const_logic_1;
        else 
            sweep_rx0_1_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_266_p5 <= (select_ln80_fu_259_p3(127 downto 96) & tmp_8_reg_370);
    trunc_ln76_fu_190_p1 <= ap_sig_allocacmp_j(1 - 1 downto 0);
    trunc_ln79_fu_200_p1 <= sweep_rx0_1_TDATA(32 - 1 downto 0);
end behav;
