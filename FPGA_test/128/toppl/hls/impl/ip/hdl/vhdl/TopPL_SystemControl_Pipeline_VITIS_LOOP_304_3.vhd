-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_SystemControl_Pipeline_VITIS_LOOP_304_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    convSet_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    convSet_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_0_empty_n : IN STD_LOGIC;
    convSet_0_read : OUT STD_LOGIC;
    convSet_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    convSet_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_1_empty_n : IN STD_LOGIC;
    convSet_1_read : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TopPL_SystemControl_Pipeline_VITIS_LOOP_304_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln304_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal convSet_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal convSet_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_11_fu_127_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_11_reg_785 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln304_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln304_reg_791_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal convSet_0_read_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal convSet_1_read_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv0_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv1_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_94_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_817 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_9_reg_824 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal x_fp_sign_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sign_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sig_5_fu_188_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal x_fp_sig_5_reg_836 : STD_LOGIC_VECTOR (51 downto 0);
    signal ymaggreater_3_fu_297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_3_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_19_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_19_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_24_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_24_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_10_fu_422_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_10_reg_861 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_12_reg_885 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fp_sign_1_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sign_1_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sig_6_fu_488_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal x_fp_sig_6_reg_897 : STD_LOGIC_VECTOR (51 downto 0);
    signal ymaggreater_5_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_5_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_28_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_28_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_4_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_4_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_33_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_33_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_15_fu_719_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_15_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxConv_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal i_5_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_p_load14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_91_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_12_fu_434_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_17_fu_731_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_94_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal data_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_8_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fp_exp_fu_203_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_fp_exp_fu_178_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln25_fu_217_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fp_sig_fu_213_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln25_3_fu_229_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln25_3_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_7_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_8_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fp_sign_fu_195_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_3_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_9_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_18_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_17_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_20_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_5_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_21_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_22_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_6_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_3_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_23_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sig_fu_400_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_fu_409_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_9_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_fu_395_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_11_fu_429_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_10_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_9_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fp_exp_1_fu_500_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_fp_exp_1_fu_478_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln25_4_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fp_sig_1_fu_510_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln25_5_fu_526_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln25_5_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_4_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_11_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_12_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_4_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fp_sign_1_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_4_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_5_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_13_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_10_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_7_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_25_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_27_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_26_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_29_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_30_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_8_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_4_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_31_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_9_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_5_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_32_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fp_sig_4_fu_697_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_10_fu_706_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_14_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_13_fu_692_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_16_fu_726_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal printdouble_ln39_fu_461_ap_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_fptrunc_64ns_32_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TopPL_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component TopPL_printdouble IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        fmt : IN STD_LOGIC_VECTOR (31 downto 0);
        v : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component TopPL_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fptrunc_64ns_32_1_no_dsp_1_U4 : component TopPL_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_91_p0,
        dout => grp_fu_91_p1);

    fpext_32ns_64_1_no_dsp_1_U5 : component TopPL_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_94_p0,
        dout => grp_fu_94_p1);

    printdouble_U6 : component TopPL_printdouble
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_const_logic_0,
        fmt => ap_const_lv32_0,
        v => data_10_fu_458_p1,
        ap_ce => printdouble_ln39_fu_461_ap_ce);

    flow_control_loop_pipe_sequential_init_U : component TopPL_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    empty_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_68 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    empty_fu_68 <= maxConv_reg_927;
                end if;
            end if; 
        end if;
    end process;

    grp_fu_94_p0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_94_p0 <= ap_sig_allocacmp_p_load14;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_94_p0 <= conv_reg_866;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_94_p0 <= conv1_fu_160_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_94_p0 <= conv0_fu_153_p1;
            end if; 
        end if;
    end process;

    i_5_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_5_fu_64 <= ap_const_lv7_0;
            elsif (((icmp_ln304_reg_791 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_5_fu_64 <= i_11_reg_785;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln18_19_reg_846 <= and_ln18_19_fu_335_p2;
                and_ln18_24_reg_856 <= and_ln18_24_fu_389_p2;
                i_11_reg_785 <= i_11_fu_127_p2;
                icmp_ln304_reg_791 <= icmp_ln304_fu_133_p2;
                icmp_ln304_reg_791_pp0_iter1_reg <= icmp_ln304_reg_791;
                or_ln18_reg_851 <= or_ln18_fu_365_p2;
                x_fp_sig_5_reg_836 <= x_fp_sig_5_fu_188_p1;
                x_fp_sign_reg_831 <= data_fu_167_p1(63 downto 63);
                ymaggreater_3_reg_841 <= ymaggreater_3_fu_297_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                and_ln18_28_reg_907 <= and_ln18_28_fu_632_p2;
                and_ln18_33_reg_917 <= and_ln18_33_fu_686_p2;
                or_ln18_4_reg_912 <= or_ln18_4_fu_662_p2;
                x_fp_sig_6_reg_897 <= x_fp_sig_6_fu_488_p1;
                x_fp_sign_1_reg_892 <= data_9_fu_467_p1(63 downto 63);
                ymaggreater_5_reg_902 <= ymaggreater_5_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                convSet_0_read_reg_795 <= convSet_0_dout;
                convSet_1_read_reg_800 <= convSet_1_dout;
                res_10_reg_861 <= res_10_fu_422_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv_reg_866 <= grp_fu_91_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dc_12_reg_885 <= grp_fu_94_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                dc_9_reg_824 <= grp_fu_94_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                dc_reg_817 <= grp_fu_94_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                maxConv_reg_927 <= grp_fu_91_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                res_15_reg_922 <= res_15_fu_719_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_878 <= grp_fu_94_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    and_ln18_17_fu_329_p2 <= (xor_ln25_fu_311_p2 and and_ln18_18_fu_323_p2);
    and_ln18_18_fu_323_p2 <= (icmp_ln18_fu_247_p2 and and_ln18_fu_265_p2);
    and_ln18_19_fu_335_p2 <= (xor_ln18_fu_317_p2 and and_ln18_17_fu_329_p2);
    and_ln18_20_fu_341_p2 <= (icmp_ln18_8_fu_259_p2 and icmp_ln18_7_fu_253_p2);
    and_ln18_21_fu_353_p2 <= (xor_ln18_fu_317_p2 and xor_ln18_5_fu_347_p2);
    and_ln18_22_fu_359_p2 <= (icmp_ln18_fu_247_p2 and and_ln18_21_fu_353_p2);
    and_ln18_23_fu_383_p2 <= (xor_ln25_fu_311_p2 and or_ln18_3_fu_377_p2);
    and_ln18_24_fu_389_p2 <= (and_ln18_fu_265_p2 and and_ln18_23_fu_383_p2);
    and_ln18_25_fu_562_p2 <= (icmp_ln18_12_fu_556_p2 and icmp_ln18_11_fu_550_p2);
    and_ln18_26_fu_626_p2 <= (and_ln18_27_fu_620_p2 and and_ln18_25_fu_562_p2);
    and_ln18_27_fu_620_p2 <= (xor_ln18_7_fu_614_p2 and icmp_ln18_10_fu_544_p2);
    and_ln18_28_fu_632_p2 <= (xor_ln25_1_fu_608_p2 and and_ln18_26_fu_626_p2);
    and_ln18_29_fu_638_p2 <= (icmp_ln18_12_fu_556_p2 and icmp_ln18_11_fu_550_p2);
    and_ln18_30_fu_650_p2 <= (xor_ln18_7_fu_614_p2 and icmp_ln18_10_fu_544_p2);
    and_ln18_31_fu_656_p2 <= (xor_ln18_8_fu_644_p2 and and_ln18_30_fu_650_p2);
    and_ln18_32_fu_680_p2 <= (xor_ln25_1_fu_608_p2 and or_ln18_5_fu_674_p2);
    and_ln18_33_fu_686_p2 <= (and_ln18_32_fu_680_p2 and and_ln18_25_fu_562_p2);
    and_ln18_fu_265_p2 <= (icmp_ln18_8_fu_259_p2 and icmp_ln18_7_fu_253_p2);
    and_ln25_3_fu_305_p2 <= (icmp_ln25_fu_223_p2 and icmp_ln25_3_fu_235_p2);
    and_ln25_4_fu_538_p2 <= (icmp_ln25_5_fu_532_p2 and icmp_ln25_4_fu_520_p2);
    and_ln25_5_fu_602_p2 <= (icmp_ln25_5_fu_532_p2 and icmp_ln25_4_fu_520_p2);
    and_ln25_fu_241_p2 <= (icmp_ln25_fu_223_p2 and icmp_ln25_3_fu_235_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(icmp_ln304_reg_791, convSet_0_empty_n, convSet_1_empty_n)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((convSet_1_empty_n = ap_const_logic_0) and (icmp_ln304_reg_791 = ap_const_lv1_0)) or ((convSet_0_empty_n = ap_const_logic_0) and (icmp_ln304_reg_791 = ap_const_lv1_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln304_reg_791)
    begin
        if (((icmp_ln304_reg_791 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln304_reg_791_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln304_reg_791_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, i_5_fu_64, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i <= i_5_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_p_load14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, maxConv_reg_927, ap_block_pp0_stage0, empty_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_p_load14 <= maxConv_reg_927;
        else 
            ap_sig_allocacmp_p_load14 <= empty_fu_68;
        end if; 
    end process;

    conv0_fu_153_p1 <= convSet_0_read_reg_795;
    conv1_fu_160_p1 <= convSet_1_read_reg_800;

    convSet_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln304_reg_791, convSet_0_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln304_reg_791 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            convSet_0_blk_n <= convSet_0_empty_n;
        else 
            convSet_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    convSet_0_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln304_reg_791, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln304_reg_791 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            convSet_0_read <= ap_const_logic_1;
        else 
            convSet_0_read <= ap_const_logic_0;
        end if; 
    end process;


    convSet_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln304_reg_791, convSet_1_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln304_reg_791 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            convSet_1_blk_n <= convSet_1_empty_n;
        else 
            convSet_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    convSet_1_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln304_reg_791, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln304_reg_791 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            convSet_1_read <= ap_const_logic_1;
        else 
            convSet_1_read <= ap_const_logic_0;
        end if; 
    end process;

    data_10_fu_458_p1 <= tmp_reg_878;
    data_8_fu_192_p1 <= dc_9_reg_824;
    data_9_fu_467_p1 <= dc_12_reg_885;
    data_fu_167_p1 <= dc_reg_817;

    grp_fu_91_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, res_12_fu_434_p3, res_17_fu_731_p3, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_91_p0 <= res_17_fu_731_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_91_p0 <= res_12_fu_434_p3;
        else 
            grp_fu_91_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_fu_127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv7_1));
    icmp_ln18_10_fu_544_p2 <= "1" when (x_fp_exp_1_fu_478_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln18_11_fu_550_p2 <= "1" when (y_fp_exp_1_fu_500_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln18_12_fu_556_p2 <= "0" when (y_fp_sig_1_fu_510_p1 = ap_const_lv52_0) else "1";
    icmp_ln18_13_fu_568_p2 <= "1" when (x_fp_sig_6_fu_488_p1 = ap_const_lv52_0) else "0";
    icmp_ln18_7_fu_253_p2 <= "1" when (y_fp_exp_fu_203_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln18_8_fu_259_p2 <= "0" when (y_fp_sig_fu_213_p1 = ap_const_lv52_0) else "1";
    icmp_ln18_9_fu_271_p2 <= "1" when (x_fp_sig_5_fu_188_p1 = ap_const_lv52_0) else "0";
    icmp_ln18_fu_247_p2 <= "1" when (x_fp_exp_fu_178_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln25_3_fu_235_p2 <= "1" when (or_ln25_3_fu_229_p2 = ap_const_lv52_0) else "0";
    icmp_ln25_4_fu_520_p2 <= "1" when (or_ln25_4_fu_514_p2 = ap_const_lv11_0) else "0";
    icmp_ln25_5_fu_532_p2 <= "1" when (or_ln25_5_fu_526_p2 = ap_const_lv52_0) else "0";
    icmp_ln25_fu_223_p2 <= "1" when (or_ln25_fu_217_p2 = ap_const_lv11_0) else "0";
    icmp_ln304_fu_133_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv7_78) else "0";
    or_ln18_3_fu_377_p2 <= (xor_ln18_6_fu_371_p2 or icmp_ln18_9_fu_271_p2);
    or_ln18_4_fu_662_p2 <= (and_ln25_4_fu_538_p2 or and_ln18_31_fu_656_p2);
    or_ln18_5_fu_674_p2 <= (xor_ln18_9_fu_668_p2 or icmp_ln18_13_fu_568_p2);
    or_ln18_fu_365_p2 <= (and_ln25_fu_241_p2 or and_ln18_22_fu_359_p2);
    or_ln25_3_fu_229_p2 <= (y_fp_sig_fu_213_p1 or x_fp_sig_5_fu_188_p1);
    or_ln25_4_fu_514_p2 <= (y_fp_exp_1_fu_500_p4 or x_fp_exp_1_fu_478_p4);
    or_ln25_5_fu_526_p2 <= (y_fp_sig_1_fu_510_p1 or x_fp_sig_6_fu_488_p1);
    or_ln25_fu_217_p2 <= (y_fp_exp_fu_203_p4 or x_fp_exp_fu_178_p4);
    p_out <= empty_fu_68;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln304_reg_791_pp0_iter1_reg)
    begin
        if (((icmp_ln304_reg_791_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    printdouble_ln39_fu_461_ap_ce_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            printdouble_ln39_fu_461_ap_ce <= ap_const_logic_1;
        else 
            printdouble_ln39_fu_461_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    res_10_fu_422_p3 <= 
        res_9_fu_418_p1 when (and_ln18_19_reg_846(0) = '1') else 
        res_fu_395_p3;
    res_11_fu_429_p3 <= 
        dc_9_reg_824 when (or_ln18_reg_851(0) = '1') else 
        res_10_reg_861;
    res_12_fu_434_p3 <= 
        dc_reg_817 when (and_ln18_24_reg_856(0) = '1') else 
        res_11_fu_429_p3;
    res_13_fu_692_p3 <= 
        tmp_reg_878 when (ymaggreater_5_reg_902(0) = '1') else 
        dc_12_reg_885;
    res_14_fu_715_p1 <= t_10_fu_706_p4;
    res_15_fu_719_p3 <= 
        res_14_fu_715_p1 when (and_ln18_28_reg_907(0) = '1') else 
        res_13_fu_692_p3;
    res_16_fu_726_p3 <= 
        tmp_reg_878 when (or_ln18_4_reg_912(0) = '1') else 
        res_15_reg_922;
    res_17_fu_731_p3 <= 
        dc_12_reg_885 when (and_ln18_33_reg_917(0) = '1') else 
        res_16_fu_726_p3;
    res_9_fu_418_p1 <= t_fu_409_p4;
    res_fu_395_p3 <= 
        dc_9_reg_824 when (ymaggreater_3_reg_841(0) = '1') else 
        dc_reg_817;
    select_ln39_4_fu_586_p3 <= 
        xor_ln39_1_fu_580_p2 when (x_fp_sign_1_fu_470_p3(0) = '1') else 
        ymaggreater_4_fu_574_p2;
    select_ln39_fu_289_p3 <= 
        xor_ln39_fu_283_p2 when (x_fp_sign_fu_170_p3(0) = '1') else 
        ymaggreater_fu_277_p2;
    t_10_fu_706_p4 <= ((x_fp_sign_1_reg_892 & ap_const_lv11_7FF) & x_fp_sig_4_fu_697_p4);
    t_fu_409_p4 <= ((x_fp_sign_reg_831 & ap_const_lv11_7FF) & x_fp_sig_fu_400_p4);
    x_fp_exp_1_fu_478_p4 <= data_9_fu_467_p1(62 downto 52);
    x_fp_exp_fu_178_p4 <= data_fu_167_p1(62 downto 52);
    
    x_fp_sig_4_fu_697_p4_proc : process(x_fp_sig_6_reg_897)
    begin
        x_fp_sig_4_fu_697_p4 <= x_fp_sig_6_reg_897;
        x_fp_sig_4_fu_697_p4(51) <= ap_const_lv1_1(0);
    end process;

    x_fp_sig_5_fu_188_p1 <= data_fu_167_p1(52 - 1 downto 0);
    x_fp_sig_6_fu_488_p1 <= data_9_fu_467_p1(52 - 1 downto 0);
    
    x_fp_sig_fu_400_p4_proc : process(x_fp_sig_5_reg_836)
    begin
        x_fp_sig_fu_400_p4 <= x_fp_sig_5_reg_836;
        x_fp_sig_fu_400_p4(51) <= ap_const_lv1_1(0);
    end process;

    x_fp_sign_1_fu_470_p3 <= data_9_fu_467_p1(63 downto 63);
    x_fp_sign_fu_170_p3 <= data_fu_167_p1(63 downto 63);
    xor_ln18_5_fu_347_p2 <= (ap_const_lv1_1 xor and_ln18_20_fu_341_p2);
    xor_ln18_6_fu_371_p2 <= (icmp_ln18_fu_247_p2 xor ap_const_lv1_1);
    xor_ln18_7_fu_614_p2 <= (icmp_ln18_13_fu_568_p2 xor ap_const_lv1_1);
    xor_ln18_8_fu_644_p2 <= (ap_const_lv1_1 xor and_ln18_29_fu_638_p2);
    xor_ln18_9_fu_668_p2 <= (icmp_ln18_10_fu_544_p2 xor ap_const_lv1_1);
    xor_ln18_fu_317_p2 <= (icmp_ln18_9_fu_271_p2 xor ap_const_lv1_1);
    xor_ln25_1_fu_608_p2 <= (ap_const_lv1_1 xor and_ln25_5_fu_602_p2);
    xor_ln25_fu_311_p2 <= (ap_const_lv1_1 xor and_ln25_3_fu_305_p2);
    xor_ln39_1_fu_580_p2 <= (ymaggreater_4_fu_574_p2 xor ap_const_lv1_1);
    xor_ln39_fu_283_p2 <= (ymaggreater_fu_277_p2 xor ap_const_lv1_1);
    y_fp_exp_1_fu_500_p4 <= data_10_fu_458_p1(62 downto 52);
    y_fp_exp_fu_203_p4 <= data_8_fu_192_p1(62 downto 52);
    y_fp_sig_1_fu_510_p1 <= data_10_fu_458_p1(52 - 1 downto 0);
    y_fp_sig_fu_213_p1 <= data_8_fu_192_p1(52 - 1 downto 0);
    y_fp_sign_1_fu_492_p3 <= data_10_fu_458_p1(63 downto 63);
    y_fp_sign_fu_195_p3 <= data_8_fu_192_p1(63 downto 63);
    ymaggreater_3_fu_297_p3 <= 
        select_ln39_fu_289_p3 when (y_fp_sign_fu_195_p3(0) = '1') else 
        ymaggreater_fu_277_p2;
    ymaggreater_4_fu_574_p2 <= "1" when (signed(data_9_fu_467_p1) < signed(data_10_fu_458_p1)) else "0";
    ymaggreater_5_fu_594_p3 <= 
        select_ln39_4_fu_586_p3 when (y_fp_sign_1_fu_492_p3(0) = '1') else 
        ymaggreater_4_fu_574_p2;
    ymaggreater_fu_277_p2 <= "1" when (signed(data_fu_167_p1) < signed(data_8_fu_192_p1)) else "0";
end behav;
