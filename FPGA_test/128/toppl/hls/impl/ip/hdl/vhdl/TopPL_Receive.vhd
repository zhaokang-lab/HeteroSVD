-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_Receive is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    syscontrol_2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    syscontrol_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    syscontrol_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    syscontrol_2_empty_n : IN STD_LOGIC;
    syscontrol_2_read : OUT STD_LOGIC;
    convSet_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    convSet_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_0_full_n : IN STD_LOGIC;
    convSet_0_write : OUT STD_LOGIC;
    convSet_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    convSet_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    convSet_1_full_n : IN STD_LOGIC;
    convSet_1_write : OUT STD_LOGIC;
    receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_0_full_n : IN STD_LOGIC;
    receive_fifo_0_write : OUT STD_LOGIC;
    receive_fifo_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    receive_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_1_full_n : IN STD_LOGIC;
    receive_fifo_1_write : OUT STD_LOGIC;
    sweep_rx0_0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_0_TVALID : IN STD_LOGIC;
    sweep_rx0_0_TREADY : OUT STD_LOGIC;
    sweep_rx0_0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sweep_rx0_1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    sweep_rx0_1_TVALID : IN STD_LOGIC;
    sweep_rx0_1_TREADY : OUT STD_LOGIC;
    sweep_rx0_1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    sweep_rx0_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    norm_rx0_TVALID : IN STD_LOGIC;
    norm_rx0_TREADY : OUT STD_LOGIC;
    norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of TopPL_Receive is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal syscontrol_2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_continue : STD_LOGIC;
    signal grp_receive4DDR_fu_128_ap_start : STD_LOGIC;
    signal grp_receive4DDR_fu_128_ap_done : STD_LOGIC;
    signal grp_receive4DDR_fu_128_ap_idle : STD_LOGIC;
    signal grp_receive4DDR_fu_128_ap_ready : STD_LOGIC;
    signal grp_receive4DDR_fu_128_receive_fifo_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_receive4DDR_fu_128_receive_fifo_0_write : STD_LOGIC;
    signal grp_receive4DDR_fu_128_norm_rx0_TREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal sig_read_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done : STD_LOGIC := '0';
    signal grp_receive4DDR_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_fu_90 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_19_fu_162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln188_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_0_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal sweep_rx0_0_TVALID_int_regslice : STD_LOGIC;
    signal sweep_rx0_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_0_TKEEP_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_sweep_rx0_0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_0_TSTRB_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_sweep_rx0_0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_0_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_sweep_rx0_0_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_0_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_1_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal sweep_rx0_1_TVALID_int_regslice : STD_LOGIC;
    signal sweep_rx0_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_1_TKEEP_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_sweep_rx0_1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_1_TSTRB_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_sweep_rx0_1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal sweep_rx0_1_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_sweep_rx0_1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_sweep_rx0_1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_norm_rx0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal norm_rx0_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal norm_rx0_TVALID_int_regslice : STD_LOGIC;
    signal norm_rx0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_norm_rx0_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_norm_rx0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal norm_rx0_TKEEP_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_norm_rx0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_rx0_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_norm_rx0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal norm_rx0_TSTRB_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_norm_rx0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_rx0_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_norm_rx0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal norm_rx0_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_norm_rx0_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_norm_rx0_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_dataflow_parent_loop_proc10 IS
    port (
        receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_0_full_n : IN STD_LOGIC;
        receive_fifo_0_write : OUT STD_LOGIC;
        sweep_rx0_0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        sweep_rx0_0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        receive_fifo_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_1_full_n : IN STD_LOGIC;
        receive_fifo_1_write : OUT STD_LOGIC;
        sweep_rx0_1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        sweep_rx0_1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        sweep_rx0_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        convSet_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        convSet_0_full_n : IN STD_LOGIC;
        convSet_0_write : OUT STD_LOGIC;
        convSet_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        convSet_1_full_n : IN STD_LOGIC;
        convSet_1_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        sweep_rx0_0_TVALID : IN STD_LOGIC;
        sweep_rx0_0_TREADY : OUT STD_LOGIC;
        sweep_rx0_1_TVALID : IN STD_LOGIC;
        sweep_rx0_1_TREADY : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component TopPL_receive4DDR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_full_n : IN STD_LOGIC;
        receive_fifo_0_write : OUT STD_LOGIC;
        norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        norm_rx0_TVALID : IN STD_LOGIC;
        norm_rx0_TREADY : OUT STD_LOGIC;
        norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TopPL_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc10_fu_100 : component TopPL_dataflow_parent_loop_proc10
    port map (
        receive_fifo_0_din => grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din,
        receive_fifo_0_full_n => receive_fifo_0_full_n,
        receive_fifo_0_write => grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write,
        sweep_rx0_0_TDATA => sweep_rx0_0_TDATA_int_regslice,
        sweep_rx0_0_TKEEP => sweep_rx0_0_TKEEP_int_regslice,
        sweep_rx0_0_TSTRB => sweep_rx0_0_TSTRB_int_regslice,
        sweep_rx0_0_TLAST => sweep_rx0_0_TLAST_int_regslice,
        receive_fifo_1_din => grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din,
        receive_fifo_1_full_n => receive_fifo_1_full_n,
        receive_fifo_1_write => grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write,
        sweep_rx0_1_TDATA => sweep_rx0_1_TDATA_int_regslice,
        sweep_rx0_1_TKEEP => sweep_rx0_1_TKEEP_int_regslice,
        sweep_rx0_1_TSTRB => sweep_rx0_1_TSTRB_int_regslice,
        sweep_rx0_1_TLAST => sweep_rx0_1_TLAST_int_regslice,
        convSet_0_din => grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din,
        convSet_0_full_n => convSet_0_full_n,
        convSet_0_write => grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write,
        convSet_1_din => grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din,
        convSet_1_full_n => convSet_1_full_n,
        convSet_1_write => grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        sweep_rx0_0_TVALID => sweep_rx0_0_TVALID_int_regslice,
        sweep_rx0_0_TREADY => grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY,
        sweep_rx0_1_TVALID => sweep_rx0_1_TVALID_int_regslice,
        sweep_rx0_1_TREADY => grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY,
        ap_start => grp_dataflow_parent_loop_proc10_fu_100_ap_start,
        ap_done => grp_dataflow_parent_loop_proc10_fu_100_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc10_fu_100_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc10_fu_100_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc10_fu_100_ap_continue);

    grp_receive4DDR_fu_128 : component TopPL_receive4DDR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_receive4DDR_fu_128_ap_start,
        ap_done => grp_receive4DDR_fu_128_ap_done,
        ap_idle => grp_receive4DDR_fu_128_ap_idle,
        ap_ready => grp_receive4DDR_fu_128_ap_ready,
        receive_fifo_0_din => grp_receive4DDR_fu_128_receive_fifo_0_din,
        receive_fifo_0_num_data_valid => ap_const_lv13_0,
        receive_fifo_0_fifo_cap => ap_const_lv13_0,
        receive_fifo_0_full_n => receive_fifo_0_full_n,
        receive_fifo_0_write => grp_receive4DDR_fu_128_receive_fifo_0_write,
        norm_rx0_TDATA => norm_rx0_TDATA_int_regslice,
        norm_rx0_TVALID => norm_rx0_TVALID_int_regslice,
        norm_rx0_TREADY => grp_receive4DDR_fu_128_norm_rx0_TREADY,
        norm_rx0_TKEEP => norm_rx0_TKEEP_int_regslice,
        norm_rx0_TSTRB => norm_rx0_TSTRB_int_regslice,
        norm_rx0_TLAST => norm_rx0_TLAST_int_regslice);

    regslice_both_sweep_rx0_0_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_0_TDATA,
        vld_in => sweep_rx0_0_TVALID,
        ack_in => regslice_both_sweep_rx0_0_V_data_V_U_ack_in,
        data_out => sweep_rx0_0_TDATA_int_regslice,
        vld_out => sweep_rx0_0_TVALID_int_regslice,
        ack_out => sweep_rx0_0_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_0_V_data_V_U_apdone_blk);

    regslice_both_sweep_rx0_0_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_0_TKEEP,
        vld_in => sweep_rx0_0_TVALID,
        ack_in => regslice_both_sweep_rx0_0_V_keep_V_U_ack_in,
        data_out => sweep_rx0_0_TKEEP_int_regslice,
        vld_out => regslice_both_sweep_rx0_0_V_keep_V_U_vld_out,
        ack_out => sweep_rx0_0_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_0_V_keep_V_U_apdone_blk);

    regslice_both_sweep_rx0_0_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_0_TSTRB,
        vld_in => sweep_rx0_0_TVALID,
        ack_in => regslice_both_sweep_rx0_0_V_strb_V_U_ack_in,
        data_out => sweep_rx0_0_TSTRB_int_regslice,
        vld_out => regslice_both_sweep_rx0_0_V_strb_V_U_vld_out,
        ack_out => sweep_rx0_0_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_0_V_strb_V_U_apdone_blk);

    regslice_both_sweep_rx0_0_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_0_TLAST,
        vld_in => sweep_rx0_0_TVALID,
        ack_in => regslice_both_sweep_rx0_0_V_last_V_U_ack_in,
        data_out => sweep_rx0_0_TLAST_int_regslice,
        vld_out => regslice_both_sweep_rx0_0_V_last_V_U_vld_out,
        ack_out => sweep_rx0_0_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_0_V_last_V_U_apdone_blk);

    regslice_both_sweep_rx0_1_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_1_TDATA,
        vld_in => sweep_rx0_1_TVALID,
        ack_in => regslice_both_sweep_rx0_1_V_data_V_U_ack_in,
        data_out => sweep_rx0_1_TDATA_int_regslice,
        vld_out => sweep_rx0_1_TVALID_int_regslice,
        ack_out => sweep_rx0_1_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_1_V_data_V_U_apdone_blk);

    regslice_both_sweep_rx0_1_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_1_TKEEP,
        vld_in => sweep_rx0_1_TVALID,
        ack_in => regslice_both_sweep_rx0_1_V_keep_V_U_ack_in,
        data_out => sweep_rx0_1_TKEEP_int_regslice,
        vld_out => regslice_both_sweep_rx0_1_V_keep_V_U_vld_out,
        ack_out => sweep_rx0_1_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_1_V_keep_V_U_apdone_blk);

    regslice_both_sweep_rx0_1_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_1_TSTRB,
        vld_in => sweep_rx0_1_TVALID,
        ack_in => regslice_both_sweep_rx0_1_V_strb_V_U_ack_in,
        data_out => sweep_rx0_1_TSTRB_int_regslice,
        vld_out => regslice_both_sweep_rx0_1_V_strb_V_U_vld_out,
        ack_out => sweep_rx0_1_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_1_V_strb_V_U_apdone_blk);

    regslice_both_sweep_rx0_1_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sweep_rx0_1_TLAST,
        vld_in => sweep_rx0_1_TVALID,
        ack_in => regslice_both_sweep_rx0_1_V_last_V_U_ack_in,
        data_out => sweep_rx0_1_TLAST_int_regslice,
        vld_out => regslice_both_sweep_rx0_1_V_last_V_U_vld_out,
        ack_out => sweep_rx0_1_TREADY_int_regslice,
        apdone_blk => regslice_both_sweep_rx0_1_V_last_V_U_apdone_blk);

    regslice_both_norm_rx0_V_data_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => norm_rx0_TDATA,
        vld_in => norm_rx0_TVALID,
        ack_in => regslice_both_norm_rx0_V_data_V_U_ack_in,
        data_out => norm_rx0_TDATA_int_regslice,
        vld_out => norm_rx0_TVALID_int_regslice,
        ack_out => norm_rx0_TREADY_int_regslice,
        apdone_blk => regslice_both_norm_rx0_V_data_V_U_apdone_blk);

    regslice_both_norm_rx0_V_keep_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => norm_rx0_TKEEP,
        vld_in => norm_rx0_TVALID,
        ack_in => regslice_both_norm_rx0_V_keep_V_U_ack_in,
        data_out => norm_rx0_TKEEP_int_regslice,
        vld_out => regslice_both_norm_rx0_V_keep_V_U_vld_out,
        ack_out => norm_rx0_TREADY_int_regslice,
        apdone_blk => regslice_both_norm_rx0_V_keep_V_U_apdone_blk);

    regslice_both_norm_rx0_V_strb_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => norm_rx0_TSTRB,
        vld_in => norm_rx0_TVALID,
        ack_in => regslice_both_norm_rx0_V_strb_V_U_ack_in,
        data_out => norm_rx0_TSTRB_int_regslice,
        vld_out => regslice_both_norm_rx0_V_strb_V_U_vld_out,
        ack_out => norm_rx0_TREADY_int_regslice,
        apdone_blk => regslice_both_norm_rx0_V_strb_V_U_apdone_blk);

    regslice_both_norm_rx0_V_last_V_U : component TopPL_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => norm_rx0_TLAST,
        vld_in => norm_rx0_TVALID,
        ack_in => regslice_both_norm_rx0_V_last_V_U_ack_in,
        data_out => norm_rx0_TLAST_int_regslice,
        vld_out => regslice_both_norm_rx0_V_last_V_U_vld_out,
        ack_out => norm_rx0_TREADY_int_regslice,
        apdone_blk => regslice_both_norm_rx0_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln188_fu_168_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc10_fu_100_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc10_fu_100_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready = ap_const_logic_0)) or ((syscontrol_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_94_p2 = ap_const_lv1_1)))) then 
                    grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc10_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_receive4DDR_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_receive4DDR_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_receive4DDR_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_receive4DDR_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_receive4DDR_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((syscontrol_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_94_p2 = ap_const_lv1_0))) then 
                i_fu_90 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln188_fu_168_p2 = ap_const_lv1_0))) then 
                i_fu_90 <= i_19_fu_162_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, syscontrol_2_empty_n, ap_CS_fsm_state2, grp_receive4DDR_fu_128_ap_done, sig_read_fu_94_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state6, ap_CS_fsm_state4, icmp_ln188_fu_168_p2, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((syscontrol_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_94_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((syscontrol_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (sig_read_fu_94_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln188_fu_168_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_receive4DDR_fu_128_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(syscontrol_2_empty_n)
    begin
        if ((syscontrol_2_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_receive4DDR_fu_128_ap_done)
    begin
        if ((grp_receive4DDR_fu_128_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready, ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready and ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln188_fu_168_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln188_fu_168_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln188_fu_168_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln188_fu_168_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= (grp_dataflow_parent_loop_proc10_fu_100_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= (grp_dataflow_parent_loop_proc10_fu_100_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready);
    convSet_0_din <= grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din;

    convSet_0_write_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            convSet_0_write <= grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write;
        else 
            convSet_0_write <= ap_const_logic_0;
        end if; 
    end process;

    convSet_1_din <= grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din;

    convSet_1_write_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            convSet_1_write <= grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write;
        else 
            convSet_1_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_dataflow_parent_loop_proc10_fu_100_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
            grp_dataflow_parent_loop_proc10_fu_100_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc10_fu_100_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc10_fu_100_ap_start <= grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg;
    grp_receive4DDR_fu_128_ap_start <= grp_receive4DDR_fu_128_ap_start_reg;
    i_19_fu_162_p2 <= std_logic_vector(unsigned(i_fu_90) + unsigned(ap_const_lv5_1));
    icmp_ln188_fu_168_p2 <= "1" when (i_fu_90 = ap_const_lv5_10) else "0";
    norm_rx0_TREADY <= regslice_both_norm_rx0_V_data_V_U_ack_in;

    norm_rx0_TREADY_int_regslice_assign_proc : process(grp_receive4DDR_fu_128_norm_rx0_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            norm_rx0_TREADY_int_regslice <= grp_receive4DDR_fu_128_norm_rx0_TREADY;
        else 
            norm_rx0_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    receive_fifo_0_din_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din, grp_receive4DDR_fu_128_receive_fifo_0_din, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            receive_fifo_0_din <= grp_receive4DDR_fu_128_receive_fifo_0_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            receive_fifo_0_din <= grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din;
        else 
            receive_fifo_0_din <= grp_receive4DDR_fu_128_receive_fifo_0_din;
        end if; 
    end process;


    receive_fifo_0_write_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write, grp_receive4DDR_fu_128_receive_fifo_0_write, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            receive_fifo_0_write <= grp_receive4DDR_fu_128_receive_fifo_0_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            receive_fifo_0_write <= grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write;
        else 
            receive_fifo_0_write <= ap_const_logic_0;
        end if; 
    end process;

    receive_fifo_1_din <= grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din;

    receive_fifo_1_write_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            receive_fifo_1_write <= grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write;
        else 
            receive_fifo_1_write <= ap_const_logic_0;
        end if; 
    end process;

    sig_read_fu_94_p2 <= syscontrol_2_dout;
    sweep_rx0_0_TREADY <= regslice_both_sweep_rx0_0_V_data_V_U_ack_in;

    sweep_rx0_0_TREADY_int_regslice_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sweep_rx0_0_TREADY_int_regslice <= grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY;
        else 
            sweep_rx0_0_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sweep_rx0_1_TREADY <= regslice_both_sweep_rx0_1_V_data_V_U_ack_in;

    sweep_rx0_1_TREADY_int_regslice_assign_proc : process(grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sweep_rx0_1_TREADY_int_regslice <= grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY;
        else 
            sweep_rx0_1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    syscontrol_2_blk_n_assign_proc : process(syscontrol_2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            syscontrol_2_blk_n <= syscontrol_2_empty_n;
        else 
            syscontrol_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    syscontrol_2_read_assign_proc : process(syscontrol_2_empty_n, ap_CS_fsm_state2)
    begin
        if (((syscontrol_2_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            syscontrol_2_read <= ap_const_logic_1;
        else 
            syscontrol_2_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
