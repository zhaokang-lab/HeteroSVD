// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module TopPL_Receive (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        syscontrol_2_dout,
        syscontrol_2_num_data_valid,
        syscontrol_2_fifo_cap,
        syscontrol_2_empty_n,
        syscontrol_2_read,
        convSet_0_din,
        convSet_0_num_data_valid,
        convSet_0_fifo_cap,
        convSet_0_full_n,
        convSet_0_write,
        convSet_1_din,
        convSet_1_num_data_valid,
        convSet_1_fifo_cap,
        convSet_1_full_n,
        convSet_1_write,
        receive_fifo_0_din,
        receive_fifo_0_num_data_valid,
        receive_fifo_0_fifo_cap,
        receive_fifo_0_full_n,
        receive_fifo_0_write,
        receive_fifo_1_din,
        receive_fifo_1_num_data_valid,
        receive_fifo_1_fifo_cap,
        receive_fifo_1_full_n,
        receive_fifo_1_write,
        sweep_rx0_0_TDATA,
        sweep_rx0_0_TVALID,
        sweep_rx0_0_TREADY,
        sweep_rx0_0_TKEEP,
        sweep_rx0_0_TSTRB,
        sweep_rx0_0_TLAST,
        sweep_rx0_1_TDATA,
        sweep_rx0_1_TVALID,
        sweep_rx0_1_TREADY,
        sweep_rx0_1_TKEEP,
        sweep_rx0_1_TSTRB,
        sweep_rx0_1_TLAST,
        norm_rx0_TDATA,
        norm_rx0_TVALID,
        norm_rx0_TREADY,
        norm_rx0_TKEEP,
        norm_rx0_TSTRB,
        norm_rx0_TLAST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] syscontrol_2_dout;
input  [2:0] syscontrol_2_num_data_valid;
input  [2:0] syscontrol_2_fifo_cap;
input   syscontrol_2_empty_n;
output   syscontrol_2_read;
output  [31:0] convSet_0_din;
input  [2:0] convSet_0_num_data_valid;
input  [2:0] convSet_0_fifo_cap;
input   convSet_0_full_n;
output   convSet_0_write;
output  [31:0] convSet_1_din;
input  [2:0] convSet_1_num_data_valid;
input  [2:0] convSet_1_fifo_cap;
input   convSet_1_full_n;
output   convSet_1_write;
output  [127:0] receive_fifo_0_din;
input  [12:0] receive_fifo_0_num_data_valid;
input  [12:0] receive_fifo_0_fifo_cap;
input   receive_fifo_0_full_n;
output   receive_fifo_0_write;
output  [127:0] receive_fifo_1_din;
input  [12:0] receive_fifo_1_num_data_valid;
input  [12:0] receive_fifo_1_fifo_cap;
input   receive_fifo_1_full_n;
output   receive_fifo_1_write;
input  [127:0] sweep_rx0_0_TDATA;
input   sweep_rx0_0_TVALID;
output   sweep_rx0_0_TREADY;
input  [15:0] sweep_rx0_0_TKEEP;
input  [15:0] sweep_rx0_0_TSTRB;
input  [0:0] sweep_rx0_0_TLAST;
input  [127:0] sweep_rx0_1_TDATA;
input   sweep_rx0_1_TVALID;
output   sweep_rx0_1_TREADY;
input  [15:0] sweep_rx0_1_TKEEP;
input  [15:0] sweep_rx0_1_TSTRB;
input  [0:0] sweep_rx0_1_TLAST;
input  [127:0] norm_rx0_TDATA;
input   norm_rx0_TVALID;
output   norm_rx0_TREADY;
input  [15:0] norm_rx0_TKEEP;
input  [15:0] norm_rx0_TSTRB;
input  [0:0] norm_rx0_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg syscontrol_2_read;
reg convSet_0_write;
reg convSet_1_write;
reg[127:0] receive_fifo_0_din;
reg receive_fifo_0_write;
reg receive_fifo_1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    syscontrol_2_blk_n;
wire    ap_CS_fsm_state2;
wire   [127:0] grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din;
wire    grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write;
wire   [127:0] grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din;
wire    grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write;
wire   [31:0] grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din;
wire    grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write;
wire   [31:0] grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din;
wire    grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write;
wire    grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY;
wire    grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY;
wire    grp_dataflow_parent_loop_proc10_fu_100_ap_start;
wire    grp_dataflow_parent_loop_proc10_fu_100_ap_done;
wire    grp_dataflow_parent_loop_proc10_fu_100_ap_ready;
wire    grp_dataflow_parent_loop_proc10_fu_100_ap_idle;
reg    grp_dataflow_parent_loop_proc10_fu_100_ap_continue;
wire    grp_receive4DDR_fu_128_ap_start;
wire    grp_receive4DDR_fu_128_ap_done;
wire    grp_receive4DDR_fu_128_ap_idle;
wire    grp_receive4DDR_fu_128_ap_ready;
wire   [127:0] grp_receive4DDR_fu_128_receive_fifo_0_din;
wire    grp_receive4DDR_fu_128_receive_fifo_0_write;
wire    grp_receive4DDR_fu_128_norm_rx0_TREADY;
reg    grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg;
wire   [0:0] sig_read_fu_94_p2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done;
reg    grp_receive4DDR_fu_128_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [4:0] i_fu_90;
wire   [4:0] i_19_fu_162_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln188_fu_168_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_sweep_rx0_0_V_data_V_U_apdone_blk;
wire   [127:0] sweep_rx0_0_TDATA_int_regslice;
wire    sweep_rx0_0_TVALID_int_regslice;
reg    sweep_rx0_0_TREADY_int_regslice;
wire    regslice_both_sweep_rx0_0_V_data_V_U_ack_in;
wire    regslice_both_sweep_rx0_0_V_keep_V_U_apdone_blk;
wire   [15:0] sweep_rx0_0_TKEEP_int_regslice;
wire    regslice_both_sweep_rx0_0_V_keep_V_U_vld_out;
wire    regslice_both_sweep_rx0_0_V_keep_V_U_ack_in;
wire    regslice_both_sweep_rx0_0_V_strb_V_U_apdone_blk;
wire   [15:0] sweep_rx0_0_TSTRB_int_regslice;
wire    regslice_both_sweep_rx0_0_V_strb_V_U_vld_out;
wire    regslice_both_sweep_rx0_0_V_strb_V_U_ack_in;
wire    regslice_both_sweep_rx0_0_V_last_V_U_apdone_blk;
wire   [0:0] sweep_rx0_0_TLAST_int_regslice;
wire    regslice_both_sweep_rx0_0_V_last_V_U_vld_out;
wire    regslice_both_sweep_rx0_0_V_last_V_U_ack_in;
wire    regslice_both_sweep_rx0_1_V_data_V_U_apdone_blk;
wire   [127:0] sweep_rx0_1_TDATA_int_regslice;
wire    sweep_rx0_1_TVALID_int_regslice;
reg    sweep_rx0_1_TREADY_int_regslice;
wire    regslice_both_sweep_rx0_1_V_data_V_U_ack_in;
wire    regslice_both_sweep_rx0_1_V_keep_V_U_apdone_blk;
wire   [15:0] sweep_rx0_1_TKEEP_int_regslice;
wire    regslice_both_sweep_rx0_1_V_keep_V_U_vld_out;
wire    regslice_both_sweep_rx0_1_V_keep_V_U_ack_in;
wire    regslice_both_sweep_rx0_1_V_strb_V_U_apdone_blk;
wire   [15:0] sweep_rx0_1_TSTRB_int_regslice;
wire    regslice_both_sweep_rx0_1_V_strb_V_U_vld_out;
wire    regslice_both_sweep_rx0_1_V_strb_V_U_ack_in;
wire    regslice_both_sweep_rx0_1_V_last_V_U_apdone_blk;
wire   [0:0] sweep_rx0_1_TLAST_int_regslice;
wire    regslice_both_sweep_rx0_1_V_last_V_U_vld_out;
wire    regslice_both_sweep_rx0_1_V_last_V_U_ack_in;
wire    regslice_both_norm_rx0_V_data_V_U_apdone_blk;
wire   [127:0] norm_rx0_TDATA_int_regslice;
wire    norm_rx0_TVALID_int_regslice;
reg    norm_rx0_TREADY_int_regslice;
wire    regslice_both_norm_rx0_V_data_V_U_ack_in;
wire    regslice_both_norm_rx0_V_keep_V_U_apdone_blk;
wire   [15:0] norm_rx0_TKEEP_int_regslice;
wire    regslice_both_norm_rx0_V_keep_V_U_vld_out;
wire    regslice_both_norm_rx0_V_keep_V_U_ack_in;
wire    regslice_both_norm_rx0_V_strb_V_U_apdone_blk;
wire   [15:0] norm_rx0_TSTRB_int_regslice;
wire    regslice_both_norm_rx0_V_strb_V_U_vld_out;
wire    regslice_both_norm_rx0_V_strb_V_U_ack_in;
wire    regslice_both_norm_rx0_V_last_V_U_apdone_blk;
wire   [0:0] norm_rx0_TLAST_int_regslice;
wire    regslice_both_norm_rx0_V_last_V_U_vld_out;
wire    regslice_both_norm_rx0_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done = 1'b0;
#0 grp_receive4DDR_fu_128_ap_start_reg = 1'b0;
#0 i_fu_90 = 5'd0;
end

TopPL_dataflow_parent_loop_proc10 grp_dataflow_parent_loop_proc10_fu_100(
    .receive_fifo_0_din(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din),
    .receive_fifo_0_full_n(receive_fifo_0_full_n),
    .receive_fifo_0_write(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write),
    .sweep_rx0_0_TDATA(sweep_rx0_0_TDATA_int_regslice),
    .sweep_rx0_0_TKEEP(sweep_rx0_0_TKEEP_int_regslice),
    .sweep_rx0_0_TSTRB(sweep_rx0_0_TSTRB_int_regslice),
    .sweep_rx0_0_TLAST(sweep_rx0_0_TLAST_int_regslice),
    .receive_fifo_1_din(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din),
    .receive_fifo_1_full_n(receive_fifo_1_full_n),
    .receive_fifo_1_write(grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write),
    .sweep_rx0_1_TDATA(sweep_rx0_1_TDATA_int_regslice),
    .sweep_rx0_1_TKEEP(sweep_rx0_1_TKEEP_int_regslice),
    .sweep_rx0_1_TSTRB(sweep_rx0_1_TSTRB_int_regslice),
    .sweep_rx0_1_TLAST(sweep_rx0_1_TLAST_int_regslice),
    .convSet_0_din(grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din),
    .convSet_0_full_n(convSet_0_full_n),
    .convSet_0_write(grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write),
    .convSet_1_din(grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din),
    .convSet_1_full_n(convSet_1_full_n),
    .convSet_1_write(grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .sweep_rx0_0_TVALID(sweep_rx0_0_TVALID_int_regslice),
    .sweep_rx0_0_TREADY(grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY),
    .sweep_rx0_1_TVALID(sweep_rx0_1_TVALID_int_regslice),
    .sweep_rx0_1_TREADY(grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY),
    .ap_start(grp_dataflow_parent_loop_proc10_fu_100_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc10_fu_100_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc10_fu_100_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc10_fu_100_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc10_fu_100_ap_continue)
);

TopPL_receive4DDR grp_receive4DDR_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_receive4DDR_fu_128_ap_start),
    .ap_done(grp_receive4DDR_fu_128_ap_done),
    .ap_idle(grp_receive4DDR_fu_128_ap_idle),
    .ap_ready(grp_receive4DDR_fu_128_ap_ready),
    .receive_fifo_0_din(grp_receive4DDR_fu_128_receive_fifo_0_din),
    .receive_fifo_0_num_data_valid(13'd0),
    .receive_fifo_0_fifo_cap(13'd0),
    .receive_fifo_0_full_n(receive_fifo_0_full_n),
    .receive_fifo_0_write(grp_receive4DDR_fu_128_receive_fifo_0_write),
    .norm_rx0_TDATA(norm_rx0_TDATA_int_regslice),
    .norm_rx0_TVALID(norm_rx0_TVALID_int_regslice),
    .norm_rx0_TREADY(grp_receive4DDR_fu_128_norm_rx0_TREADY),
    .norm_rx0_TKEEP(norm_rx0_TKEEP_int_regslice),
    .norm_rx0_TSTRB(norm_rx0_TSTRB_int_regslice),
    .norm_rx0_TLAST(norm_rx0_TLAST_int_regslice)
);

TopPL_regslice_both #(
    .DataWidth( 128 ))
regslice_both_sweep_rx0_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_0_TDATA),
    .vld_in(sweep_rx0_0_TVALID),
    .ack_in(regslice_both_sweep_rx0_0_V_data_V_U_ack_in),
    .data_out(sweep_rx0_0_TDATA_int_regslice),
    .vld_out(sweep_rx0_0_TVALID_int_regslice),
    .ack_out(sweep_rx0_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_0_V_data_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_sweep_rx0_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_0_TKEEP),
    .vld_in(sweep_rx0_0_TVALID),
    .ack_in(regslice_both_sweep_rx0_0_V_keep_V_U_ack_in),
    .data_out(sweep_rx0_0_TKEEP_int_regslice),
    .vld_out(regslice_both_sweep_rx0_0_V_keep_V_U_vld_out),
    .ack_out(sweep_rx0_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_0_V_keep_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_sweep_rx0_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_0_TSTRB),
    .vld_in(sweep_rx0_0_TVALID),
    .ack_in(regslice_both_sweep_rx0_0_V_strb_V_U_ack_in),
    .data_out(sweep_rx0_0_TSTRB_int_regslice),
    .vld_out(regslice_both_sweep_rx0_0_V_strb_V_U_vld_out),
    .ack_out(sweep_rx0_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_0_V_strb_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 1 ))
regslice_both_sweep_rx0_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_0_TLAST),
    .vld_in(sweep_rx0_0_TVALID),
    .ack_in(regslice_both_sweep_rx0_0_V_last_V_U_ack_in),
    .data_out(sweep_rx0_0_TLAST_int_regslice),
    .vld_out(regslice_both_sweep_rx0_0_V_last_V_U_vld_out),
    .ack_out(sweep_rx0_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_0_V_last_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 128 ))
regslice_both_sweep_rx0_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_1_TDATA),
    .vld_in(sweep_rx0_1_TVALID),
    .ack_in(regslice_both_sweep_rx0_1_V_data_V_U_ack_in),
    .data_out(sweep_rx0_1_TDATA_int_regslice),
    .vld_out(sweep_rx0_1_TVALID_int_regslice),
    .ack_out(sweep_rx0_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_1_V_data_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_sweep_rx0_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_1_TKEEP),
    .vld_in(sweep_rx0_1_TVALID),
    .ack_in(regslice_both_sweep_rx0_1_V_keep_V_U_ack_in),
    .data_out(sweep_rx0_1_TKEEP_int_regslice),
    .vld_out(regslice_both_sweep_rx0_1_V_keep_V_U_vld_out),
    .ack_out(sweep_rx0_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_1_V_keep_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_sweep_rx0_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_1_TSTRB),
    .vld_in(sweep_rx0_1_TVALID),
    .ack_in(regslice_both_sweep_rx0_1_V_strb_V_U_ack_in),
    .data_out(sweep_rx0_1_TSTRB_int_regslice),
    .vld_out(regslice_both_sweep_rx0_1_V_strb_V_U_vld_out),
    .ack_out(sweep_rx0_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_1_V_strb_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 1 ))
regslice_both_sweep_rx0_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(sweep_rx0_1_TLAST),
    .vld_in(sweep_rx0_1_TVALID),
    .ack_in(regslice_both_sweep_rx0_1_V_last_V_U_ack_in),
    .data_out(sweep_rx0_1_TLAST_int_regslice),
    .vld_out(regslice_both_sweep_rx0_1_V_last_V_U_vld_out),
    .ack_out(sweep_rx0_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_sweep_rx0_1_V_last_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 128 ))
regslice_both_norm_rx0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(norm_rx0_TDATA),
    .vld_in(norm_rx0_TVALID),
    .ack_in(regslice_both_norm_rx0_V_data_V_U_ack_in),
    .data_out(norm_rx0_TDATA_int_regslice),
    .vld_out(norm_rx0_TVALID_int_regslice),
    .ack_out(norm_rx0_TREADY_int_regslice),
    .apdone_blk(regslice_both_norm_rx0_V_data_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_norm_rx0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(norm_rx0_TKEEP),
    .vld_in(norm_rx0_TVALID),
    .ack_in(regslice_both_norm_rx0_V_keep_V_U_ack_in),
    .data_out(norm_rx0_TKEEP_int_regslice),
    .vld_out(regslice_both_norm_rx0_V_keep_V_U_vld_out),
    .ack_out(norm_rx0_TREADY_int_regslice),
    .apdone_blk(regslice_both_norm_rx0_V_keep_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 16 ))
regslice_both_norm_rx0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(norm_rx0_TSTRB),
    .vld_in(norm_rx0_TVALID),
    .ack_in(regslice_both_norm_rx0_V_strb_V_U_ack_in),
    .data_out(norm_rx0_TSTRB_int_regslice),
    .vld_out(regslice_both_norm_rx0_V_strb_V_U_vld_out),
    .ack_out(norm_rx0_TREADY_int_regslice),
    .apdone_blk(regslice_both_norm_rx0_V_strb_V_U_apdone_blk)
);

TopPL_regslice_both #(
    .DataWidth( 1 ))
regslice_both_norm_rx0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(norm_rx0_TLAST),
    .vld_in(norm_rx0_TVALID),
    .ack_in(regslice_both_norm_rx0_V_last_V_U_ack_in),
    .data_out(norm_rx0_TLAST_int_regslice),
    .vld_out(regslice_both_norm_rx0_V_last_V_U_vld_out),
    .ack_out(norm_rx0_TREADY_int_regslice),
    .apdone_blk(regslice_both_norm_rx0_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln188_fu_168_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc10_fu_100_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc10_fu_100_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready == 1'b0)) | ((syscontrol_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (sig_read_fu_94_p2 == 1'd1)))) begin
            grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc10_fu_100_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_receive4DDR_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_receive4DDR_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_receive4DDR_fu_128_ap_ready == 1'b1)) begin
            grp_receive4DDR_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((syscontrol_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (sig_read_fu_94_p2 == 1'd0))) begin
        i_fu_90 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln188_fu_168_p2 == 1'd0))) begin
        i_fu_90 <= i_19_fu_162_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((syscontrol_2_empty_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_receive4DDR_fu_128_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln188_fu_168_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln188_fu_168_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        convSet_0_write = grp_dataflow_parent_loop_proc10_fu_100_convSet_0_write;
    end else begin
        convSet_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        convSet_1_write = grp_dataflow_parent_loop_proc10_fu_100_convSet_1_write;
    end else begin
        convSet_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
        grp_dataflow_parent_loop_proc10_fu_100_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc10_fu_100_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        norm_rx0_TREADY_int_regslice = grp_receive4DDR_fu_128_norm_rx0_TREADY;
    end else begin
        norm_rx0_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        receive_fifo_0_din = grp_receive4DDR_fu_128_receive_fifo_0_din;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        receive_fifo_0_din = grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_din;
    end else begin
        receive_fifo_0_din = grp_receive4DDR_fu_128_receive_fifo_0_din;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        receive_fifo_0_write = grp_receive4DDR_fu_128_receive_fifo_0_write;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        receive_fifo_0_write = grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_0_write;
    end else begin
        receive_fifo_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        receive_fifo_1_write = grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_write;
    end else begin
        receive_fifo_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sweep_rx0_0_TREADY_int_regslice = grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_0_TREADY;
    end else begin
        sweep_rx0_0_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sweep_rx0_1_TREADY_int_regslice = grp_dataflow_parent_loop_proc10_fu_100_sweep_rx0_1_TREADY;
    end else begin
        sweep_rx0_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        syscontrol_2_blk_n = syscontrol_2_empty_n;
    end else begin
        syscontrol_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((syscontrol_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        syscontrol_2_read = 1'b1;
    end else begin
        syscontrol_2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((syscontrol_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (sig_read_fu_94_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((syscontrol_2_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (sig_read_fu_94_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln188_fu_168_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_receive4DDR_fu_128_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready & ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done) == 1'b0);
end

assign ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_done = (grp_dataflow_parent_loop_proc10_fu_100_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc10_fu_100_ap_ready = (grp_dataflow_parent_loop_proc10_fu_100_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc10_fu_100_ap_ready);

assign convSet_0_din = grp_dataflow_parent_loop_proc10_fu_100_convSet_0_din;

assign convSet_1_din = grp_dataflow_parent_loop_proc10_fu_100_convSet_1_din;

assign grp_dataflow_parent_loop_proc10_fu_100_ap_start = grp_dataflow_parent_loop_proc10_fu_100_ap_start_reg;

assign grp_receive4DDR_fu_128_ap_start = grp_receive4DDR_fu_128_ap_start_reg;

assign i_19_fu_162_p2 = (i_fu_90 + 5'd1);

assign icmp_ln188_fu_168_p2 = ((i_fu_90 == 5'd16) ? 1'b1 : 1'b0);

assign norm_rx0_TREADY = regslice_both_norm_rx0_V_data_V_U_ack_in;

assign receive_fifo_1_din = grp_dataflow_parent_loop_proc10_fu_100_receive_fifo_1_din;

assign sig_read_fu_94_p2 = syscontrol_2_dout;

assign sweep_rx0_0_TREADY = regslice_both_sweep_rx0_0_V_data_V_U_ack_in;

assign sweep_rx0_1_TREADY = regslice_both_sweep_rx0_1_V_data_V_U_ack_in;

endmodule //TopPL_Receive
