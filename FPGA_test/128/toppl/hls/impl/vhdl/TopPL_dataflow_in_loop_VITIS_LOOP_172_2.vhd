-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_dataflow_in_loop_VITIS_LOOP_172_2 is
port (
    send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    send_fifo_0_empty_n : IN STD_LOGIC;
    send_fifo_0_read : OUT STD_LOGIC;
    sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    send_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    send_fifo_1_empty_n : IN STD_LOGIC;
    send_fifo_1_read : OUT STD_LOGIC;
    sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    sweep_tx0_0_TVALID : OUT STD_LOGIC;
    sweep_tx0_0_TREADY : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    sweep_tx0_1_TVALID : OUT STD_LOGIC;
    sweep_tx0_1_TREADY : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of TopPL_dataflow_in_loop_VITIS_LOOP_172_2 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal send2AIE_U0_ap_start : STD_LOGIC;
    signal send2AIE_U0_ap_done : STD_LOGIC;
    signal send2AIE_U0_ap_continue : STD_LOGIC;
    signal send2AIE_U0_ap_idle : STD_LOGIC;
    signal send2AIE_U0_ap_ready : STD_LOGIC;
    signal send2AIE_U0_send_fifo_0_read : STD_LOGIC;
    signal send2AIE_U0_sweep_tx0_0_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal send2AIE_U0_sweep_tx0_0_TVALID : STD_LOGIC;
    signal send2AIE_U0_sweep_tx0_0_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal send2AIE_U0_sweep_tx0_0_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal send2AIE_U0_sweep_tx0_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal send2AIE_2_U0_ap_start : STD_LOGIC;
    signal send2AIE_2_U0_ap_done : STD_LOGIC;
    signal send2AIE_2_U0_ap_continue : STD_LOGIC;
    signal send2AIE_2_U0_ap_idle : STD_LOGIC;
    signal send2AIE_2_U0_ap_ready : STD_LOGIC;
    signal send2AIE_2_U0_send_fifo_1_read : STD_LOGIC;
    signal send2AIE_2_U0_sweep_tx0_1_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal send2AIE_2_U0_sweep_tx0_1_TVALID : STD_LOGIC;
    signal send2AIE_2_U0_sweep_tx0_1_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal send2AIE_2_U0_sweep_tx0_1_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal send2AIE_2_U0_sweep_tx0_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_send2AIE_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_send2AIE_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_send2AIE_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_send2AIE_2_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_send2AIE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        send_fifo_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_0_empty_n : IN STD_LOGIC;
        send_fifo_0_read : OUT STD_LOGIC;
        sweep_tx0_0_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_0_TVALID : OUT STD_LOGIC;
        sweep_tx0_0_TREADY : IN STD_LOGIC;
        sweep_tx0_0_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component TopPL_send2AIE_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        send_fifo_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        send_fifo_1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        send_fifo_1_empty_n : IN STD_LOGIC;
        send_fifo_1_read : OUT STD_LOGIC;
        sweep_tx0_1_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        sweep_tx0_1_TVALID : OUT STD_LOGIC;
        sweep_tx0_1_TREADY : IN STD_LOGIC;
        sweep_tx0_1_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        sweep_tx0_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    send2AIE_U0 : component TopPL_send2AIE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => send2AIE_U0_ap_start,
        ap_done => send2AIE_U0_ap_done,
        ap_continue => send2AIE_U0_ap_continue,
        ap_idle => send2AIE_U0_ap_idle,
        ap_ready => send2AIE_U0_ap_ready,
        send_fifo_0_dout => send_fifo_0_dout,
        send_fifo_0_num_data_valid => ap_const_lv10_0,
        send_fifo_0_fifo_cap => ap_const_lv10_0,
        send_fifo_0_empty_n => send_fifo_0_empty_n,
        send_fifo_0_read => send2AIE_U0_send_fifo_0_read,
        sweep_tx0_0_TDATA => send2AIE_U0_sweep_tx0_0_TDATA,
        sweep_tx0_0_TVALID => send2AIE_U0_sweep_tx0_0_TVALID,
        sweep_tx0_0_TREADY => sweep_tx0_0_TREADY,
        sweep_tx0_0_TKEEP => send2AIE_U0_sweep_tx0_0_TKEEP,
        sweep_tx0_0_TSTRB => send2AIE_U0_sweep_tx0_0_TSTRB,
        sweep_tx0_0_TLAST => send2AIE_U0_sweep_tx0_0_TLAST);

    send2AIE_2_U0 : component TopPL_send2AIE_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => send2AIE_2_U0_ap_start,
        ap_done => send2AIE_2_U0_ap_done,
        ap_continue => send2AIE_2_U0_ap_continue,
        ap_idle => send2AIE_2_U0_ap_idle,
        ap_ready => send2AIE_2_U0_ap_ready,
        send_fifo_1_dout => send_fifo_1_dout,
        send_fifo_1_num_data_valid => ap_const_lv10_0,
        send_fifo_1_fifo_cap => ap_const_lv10_0,
        send_fifo_1_empty_n => send_fifo_1_empty_n,
        send_fifo_1_read => send2AIE_2_U0_send_fifo_1_read,
        sweep_tx0_1_TDATA => send2AIE_2_U0_sweep_tx0_1_TDATA,
        sweep_tx0_1_TVALID => send2AIE_2_U0_sweep_tx0_1_TVALID,
        sweep_tx0_1_TREADY => sweep_tx0_1_TREADY,
        sweep_tx0_1_TKEEP => send2AIE_2_U0_sweep_tx0_1_TKEEP,
        sweep_tx0_1_TSTRB => send2AIE_2_U0_sweep_tx0_1_TSTRB,
        sweep_tx0_1_TLAST => send2AIE_2_U0_sweep_tx0_1_TLAST);





    ap_sync_reg_send2AIE_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_send2AIE_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_send2AIE_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_send2AIE_2_U0_ap_ready <= ap_sync_send2AIE_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_send2AIE_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_send2AIE_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_send2AIE_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_send2AIE_U0_ap_ready <= ap_sync_send2AIE_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (send2AIE_U0_ap_idle and send2AIE_2_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (send2AIE_U0_ap_done and send2AIE_2_U0_ap_done);
    ap_sync_ready <= (ap_sync_send2AIE_U0_ap_ready and ap_sync_send2AIE_2_U0_ap_ready);
    ap_sync_send2AIE_2_U0_ap_ready <= (send2AIE_2_U0_ap_ready or ap_sync_reg_send2AIE_2_U0_ap_ready);
    ap_sync_send2AIE_U0_ap_ready <= (send2AIE_U0_ap_ready or ap_sync_reg_send2AIE_U0_ap_ready);
    send2AIE_2_U0_ap_continue <= ap_sync_continue;
    send2AIE_2_U0_ap_start <= ((ap_sync_reg_send2AIE_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    send2AIE_U0_ap_continue <= ap_sync_continue;
    send2AIE_U0_ap_start <= ((ap_sync_reg_send2AIE_U0_ap_ready xor ap_const_logic_1) and ap_start);
    send_fifo_0_read <= send2AIE_U0_send_fifo_0_read;
    send_fifo_1_read <= send2AIE_2_U0_send_fifo_1_read;
    sweep_tx0_0_TDATA <= send2AIE_U0_sweep_tx0_0_TDATA;
    sweep_tx0_0_TKEEP <= send2AIE_U0_sweep_tx0_0_TKEEP;
    sweep_tx0_0_TLAST <= send2AIE_U0_sweep_tx0_0_TLAST;
    sweep_tx0_0_TSTRB <= send2AIE_U0_sweep_tx0_0_TSTRB;
    sweep_tx0_0_TVALID <= send2AIE_U0_sweep_tx0_0_TVALID;
    sweep_tx0_1_TDATA <= send2AIE_2_U0_sweep_tx0_1_TDATA;
    sweep_tx0_1_TKEEP <= send2AIE_2_U0_sweep_tx0_1_TKEEP;
    sweep_tx0_1_TLAST <= send2AIE_2_U0_sweep_tx0_1_TLAST;
    sweep_tx0_1_TSTRB <= send2AIE_2_U0_sweep_tx0_1_TSTRB;
    sweep_tx0_1_TVALID <= send2AIE_2_U0_sweep_tx0_1_TVALID;
end behav;
