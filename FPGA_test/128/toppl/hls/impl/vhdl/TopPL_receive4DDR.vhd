-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TopPL_receive4DDR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    receive_fifo_0_full_n : IN STD_LOGIC;
    receive_fifo_0_write : OUT STD_LOGIC;
    norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    norm_rx0_TVALID : IN STD_LOGIC;
    norm_rx0_TREADY : OUT STD_LOGIC;
    norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of TopPL_receive4DDR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal receive_fifo_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal norm_rx0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_temp_2_fu_216_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal data_temp_2_reg_335 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln50_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln50_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_idle : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_ready : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_write : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_norm_rx0_TREADY : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_5_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_5_out_ap_vld : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o_ap_vld : STD_LOGIC;
    signal grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_temp_fu_88 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal i_fu_84 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_8_fu_188_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal data_temp_1_fu_92 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal data_temp_6_fu_264_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln53_fu_289_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_206_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TopPL_receive4DDR_Pipeline_VITIS_LOOP_39_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        norm_rx0_TVALID : IN STD_LOGIC;
        receive_fifo_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        receive_fifo_0_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        receive_fifo_0_full_n : IN STD_LOGIC;
        receive_fifo_0_write : OUT STD_LOGIC;
        data_temp_1 : IN STD_LOGIC_VECTOR (127 downto 0);
        data_temp_2 : IN STD_LOGIC_VECTOR (127 downto 0);
        norm_rx0_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        norm_rx0_TREADY : OUT STD_LOGIC;
        norm_rx0_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        norm_rx0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        data_temp_5_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        data_temp_5_out_ap_vld : OUT STD_LOGIC;
        data_temp_4_out_i : IN STD_LOGIC_VECTOR (127 downto 0);
        data_temp_4_out_o : OUT STD_LOGIC_VECTOR (127 downto 0);
        data_temp_4_out_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119 : component TopPL_receive4DDR_Pipeline_VITIS_LOOP_39_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start,
        ap_done => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done,
        ap_idle => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_idle,
        ap_ready => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_ready,
        norm_rx0_TVALID => norm_rx0_TVALID,
        receive_fifo_0_din => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_din,
        receive_fifo_0_num_data_valid => ap_const_lv13_0,
        receive_fifo_0_fifo_cap => ap_const_lv13_0,
        receive_fifo_0_full_n => receive_fifo_0_full_n,
        receive_fifo_0_write => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_write,
        data_temp_1 => data_temp_1_fu_92,
        data_temp_2 => data_temp_2_reg_335,
        norm_rx0_TDATA => norm_rx0_TDATA,
        norm_rx0_TREADY => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_norm_rx0_TREADY,
        norm_rx0_TKEEP => norm_rx0_TKEEP,
        norm_rx0_TSTRB => norm_rx0_TSTRB,
        norm_rx0_TLAST => norm_rx0_TLAST,
        data_temp_5_out => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_5_out,
        data_temp_5_out_ap_vld => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_5_out_ap_vld,
        data_temp_4_out_i => data_temp_fu_88,
        data_temp_4_out_o => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o,
        data_temp_4_out_o_ap_vld => grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_ready = ap_const_logic_1)) then 
                    grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_temp_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                data_temp_1_fu_92 <= ap_const_lv128_lc_1;
            elsif (((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                data_temp_1_fu_92 <= data_temp_6_fu_264_p5;
            end if; 
        end if;
    end process;

    data_temp_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                data_temp_fu_88 <= ap_const_lv128_lc_1;
            elsif (((grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                data_temp_fu_88 <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_4_out_o;
            end if; 
        end if;
    end process;

    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_84 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then 
                i_fu_84 <= i_8_fu_188_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                data_temp_2_reg_335 <= data_temp_2_fu_216_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sigma_reg_348 <= norm_rx0_TDATA(63 downto 32);
                trunc_ln50_reg_343 <= trunc_ln50_fu_244_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, receive_fifo_0_full_n, norm_rx0_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, icmp_ln32_fu_194_p2, ap_CS_fsm_state5, grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done, ap_CS_fsm_state4, ap_block_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln32_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((norm_rx0_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done)
    begin
        if ((grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(norm_rx0_TVALID)
    begin
        if ((norm_rx0_TVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(receive_fifo_0_full_n)
    begin
        if ((receive_fifo_0_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(receive_fifo_0_full_n)
    begin
        if ((receive_fifo_0_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_assign_proc : process(norm_rx0_TVALID, icmp_ln32_fu_194_p2)
    begin
                ap_block_state2 <= ((icmp_ln32_fu_194_p2 = ap_const_lv1_0) and (norm_rx0_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_194_p2, ap_block_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln32_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_194_p2, ap_block_state2)
    begin
        if (((icmp_ln32_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_temp_2_fu_216_p5 <= (data_temp_fu_88(127 downto 96) & tmp_fu_206_p4);
    data_temp_6_fu_264_p5 <= (trunc_ln50_reg_343 & grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_data_temp_5_out(95 downto 0));
    grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_ap_start_reg;
    i_8_fu_188_p2 <= std_logic_vector(unsigned(i_fu_84) + unsigned(ap_const_lv4_1));
    icmp_ln32_fu_194_p2 <= "1" when (i_fu_84 = ap_const_lv4_8) else "0";

    norm_rx0_TDATA_blk_n_assign_proc : process(norm_rx0_TVALID, ap_CS_fsm_state2, icmp_ln32_fu_194_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln32_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            norm_rx0_TDATA_blk_n <= norm_rx0_TVALID;
        else 
            norm_rx0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    norm_rx0_TREADY_assign_proc : process(norm_rx0_TVALID, ap_CS_fsm_state2, icmp_ln32_fu_194_p2, ap_CS_fsm_state5, grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_norm_rx0_TREADY, ap_CS_fsm_state4, ap_block_state2)
    begin
        if ((((icmp_ln32_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2)) or ((norm_rx0_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            norm_rx0_TREADY <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            norm_rx0_TREADY <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_norm_rx0_TREADY;
        else 
            norm_rx0_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    receive_fifo_0_blk_n_assign_proc : process(receive_fifo_0_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            receive_fifo_0_blk_n <= receive_fifo_0_full_n;
        else 
            receive_fifo_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    receive_fifo_0_din_assign_proc : process(receive_fifo_0_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_din, ap_CS_fsm_state4, data_temp_6_fu_264_p5, zext_ln53_fu_289_p1)
    begin
        if (((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            receive_fifo_0_din <= zext_ln53_fu_289_p1;
        elsif (((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            receive_fifo_0_din <= data_temp_6_fu_264_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            receive_fifo_0_din <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_din;
        else 
            receive_fifo_0_din <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_din;
        end if; 
    end process;


    receive_fifo_0_write_assign_proc : process(receive_fifo_0_full_n, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_write, ap_CS_fsm_state4)
    begin
        if ((((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((receive_fifo_0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            receive_fifo_0_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            receive_fifo_0_write <= grp_receive4DDR_Pipeline_VITIS_LOOP_39_2_fu_119_receive_fifo_0_write;
        else 
            receive_fifo_0_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_206_p4 <= norm_rx0_TDATA(127 downto 32);
    trunc_ln50_fu_244_p1 <= norm_rx0_TDATA(32 - 1 downto 0);
    zext_ln53_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigma_reg_348),128));
end behav;
